1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/Casezx/top.sv:31:1: Compile module "work@top_xa".
[INF:CP0303] tests/simple_tests/Casezx/top.sv:41:1: Compile module "work@top_xx".
[INF:CP0303] tests/simple_tests/Casezx/top.sv:51:1: Compile module "work@top_xz".
[INF:CP0303] tests/simple_tests/Casezx/top.sv:1:1: Compile module "work@top_za".
[INF:CP0303] tests/simple_tests/Casezx/top.sv:21:1: Compile module "work@top_zx".
[INF:CP0303] tests/simple_tests/Casezx/top.sv:11:1: Compile module "work@top_zz".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/Casezx/top.sv:1:1: Top level module "work@top_za".
[NTE:EL0503] tests/simple_tests/Casezx/top.sv:11:1: Top level module "work@top_zz".
[NTE:EL0503] tests/simple_tests/Casezx/top.sv:21:1: Top level module "work@top_zx".
[NTE:EL0503] tests/simple_tests/Casezx/top.sv:31:1: Top level module "work@top_xa".
[NTE:EL0503] tests/simple_tests/Casezx/top.sv:41:1: Top level module "work@top_xx".
[NTE:EL0503] tests/simple_tests/Casezx/top.sv:51:1: Top level module "work@top_xz".
[NTE:EL0504] Multiple top level modules in design.
[NTE:EL0508] Nb Top level modules: 6.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 6.
[NTE:EL0511] Nb leaf instances: 6.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 11
Object 'work@top_za' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 's' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 's' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object '' of type 'module_inst'
    Object 's' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 's' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object '' of type 'module_inst'
    Object 's' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 's' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object '' of type 'module_inst'
    Object 's' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 's' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object '' of type 'module_inst'
    Object 's' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 's' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object '' of type 'module_inst'
    Object 's' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 's' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object 'work@top_za' of type 'module_inst'
    Object 's' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 's' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
  Object 'work@top_zz' of type 'module_inst'
    Object 's' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 's' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
  Object 'work@top_zx' of type 'module_inst'
    Object 's' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 's' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
  Object 'work@top_xa' of type 'module_inst'
    Object 's' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 's' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
  Object 'work@top_xx' of type 'module_inst'
    Object 's' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 's' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
  Object 'work@top_xz' of type 'module_inst'
    Object 's' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 's' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
Generating RTLIL representation for module `\top_za'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:1.1-9.10> str='\top_za'
      AST_WIRE <tests/simple_tests/Casezx/top.sv:1.33-1.34> str='\s' input logic port=1 multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:1.27-1.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:1.55-1.56> str='\y' output logic port=2 multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:1.49-1.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:2.1-8.9>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:2.1-8.9>
          AST_CASE <tests/simple_tests/Casezx/top.sv:3.2-8.9>
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:3.9-3.10> str='\s'
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:4.3-4.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:4.12-4.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:4.12-4.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) range=[1:0] int=3
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:5.3-5.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:5.12-5.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:5.12-5.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:6.3-6.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:6.12-6.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:6.12-6.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:7.3-7.22>
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0>
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:7.13-7.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:7.13-7.14> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top_za(s, y);
      input [2:0] s;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        casez (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:1.1-9.10> str='\top_za' basic_prep
      AST_WIRE <tests/simple_tests/Casezx/top.sv:1.33-1.34> str='\s' input logic basic_prep port=1 range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:1.27-1.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:1.55-1.56> str='\y' output logic reg basic_prep port=2 range=[1:0] multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:1.49-1.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:2.1-8.9> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:2.1-8.9> basic_prep
          AST_CASE <tests/simple_tests/Casezx/top.sv:3.2-8.9> basic_prep
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:3.9-3.10> str='\s' basic_prep
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:4.3-4.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:4.12-4.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:4.12-4.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) basic_prep range=[1:0] int=3
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:5.3-5.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:5.12-5.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:5.12-5.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:6.3-6.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:6.12-6.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:6.12-6.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:7.3-7.22> basic_prep
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:7.13-7.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:7.13-7.14> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) basic_prep range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top_za(s, y);
      input [2:0] s;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        casez (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `\top_xz'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:51.1-59.10> str='\top_xz'
      AST_WIRE <tests/simple_tests/Casezx/top.sv:51.33-51.34> str='\s' input logic port=11 multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:51.27-51.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:51.55-51.56> str='\y' output logic port=12 multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:51.49-51.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:52.1-58.9>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:52.1-58.9>
          AST_CASE <tests/simple_tests/Casezx/top.sv:53.2-58.9>
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:53.9-53.10> str='\s'
            AST_CONDX <tests/simple_tests/Casezx/top.sv:54.3-54.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:54.12-54.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:54.12-54.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) range=[1:0] int=3
            AST_CONDX <tests/simple_tests/Casezx/top.sv:55.3-55.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:55.12-55.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:55.12-55.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
            AST_CONDX <tests/simple_tests/Casezx/top.sv:56.3-56.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:56.12-56.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:56.12-56.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_CONDX <tests/simple_tests/Casezx/top.sv:57.3-57.22>
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0>
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:57.13-57.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:57.13-57.14> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top_xz(s, y);
      input [2:0] s;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        casex (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:51.1-59.10> str='\top_xz' basic_prep
      AST_WIRE <tests/simple_tests/Casezx/top.sv:51.33-51.34> str='\s' input logic basic_prep port=11 range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:51.27-51.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:51.55-51.56> str='\y' output logic reg basic_prep port=12 range=[1:0] multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:51.49-51.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:52.1-58.9> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:52.1-58.9> basic_prep
          AST_CASE <tests/simple_tests/Casezx/top.sv:53.2-58.9> basic_prep
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:53.9-53.10> str='\s' basic_prep
            AST_CONDX <tests/simple_tests/Casezx/top.sv:54.3-54.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:54.12-54.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:54.12-54.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) basic_prep range=[1:0] int=3
            AST_CONDX <tests/simple_tests/Casezx/top.sv:55.3-55.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:55.12-55.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:55.12-55.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
            AST_CONDX <tests/simple_tests/Casezx/top.sv:56.3-56.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:56.12-56.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:56.12-56.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_CONDX <tests/simple_tests/Casezx/top.sv:57.3-57.22> basic_prep
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:57.13-57.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:57.13-57.14> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) basic_prep range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top_xz(s, y);
      input [2:0] s;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        casex (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `\top_zz'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:11.1-19.10> str='\top_zz'
      AST_WIRE <tests/simple_tests/Casezx/top.sv:11.33-11.34> str='\s' input logic port=3 multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:11.27-11.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:11.55-11.56> str='\y' output logic port=4 multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:11.49-11.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:12.1-18.9>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:12.1-18.9>
          AST_CASE <tests/simple_tests/Casezx/top.sv:13.2-18.9>
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:13.9-13.10> str='\s'
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:14.3-14.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:14.12-14.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:14.12-14.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) range=[1:0] int=3
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:15.3-15.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:15.12-15.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:15.12-15.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:16.3-16.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:16.12-16.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:16.12-16.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:17.3-17.22>
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0>
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:17.13-17.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:17.13-17.14> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top_zz(s, y);
      input [2:0] s;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        casez (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:11.1-19.10> str='\top_zz' basic_prep
      AST_WIRE <tests/simple_tests/Casezx/top.sv:11.33-11.34> str='\s' input logic basic_prep port=3 range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:11.27-11.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:11.55-11.56> str='\y' output logic reg basic_prep port=4 range=[1:0] multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:11.49-11.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:12.1-18.9> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:12.1-18.9> basic_prep
          AST_CASE <tests/simple_tests/Casezx/top.sv:13.2-18.9> basic_prep
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:13.9-13.10> str='\s' basic_prep
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:14.3-14.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:14.12-14.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:14.12-14.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) basic_prep range=[1:0] int=3
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:15.3-15.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:15.12-15.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:15.12-15.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:16.3-16.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:16.12-16.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:16.12-16.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:17.3-17.22> basic_prep
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:17.13-17.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:17.13-17.14> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) basic_prep range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top_zz(s, y);
      input [2:0] s;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        casez (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `\top_xx'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:41.1-49.10> str='\top_xx'
      AST_WIRE <tests/simple_tests/Casezx/top.sv:41.33-41.34> str='\s' input logic port=9 multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:41.27-41.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:41.55-41.56> str='\y' output logic port=10 multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:41.49-41.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:42.1-48.9>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:42.1-48.9>
          AST_CASE <tests/simple_tests/Casezx/top.sv:43.2-48.9>
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:43.9-43.10> str='\s'
            AST_CONDX <tests/simple_tests/Casezx/top.sv:44.3-44.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:44.12-44.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:44.12-44.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) range=[1:0] int=3
            AST_CONDX <tests/simple_tests/Casezx/top.sv:45.3-45.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:45.12-45.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:45.12-45.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
            AST_CONDX <tests/simple_tests/Casezx/top.sv:46.3-46.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:46.12-46.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:46.12-46.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_CONDX <tests/simple_tests/Casezx/top.sv:47.3-47.22>
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0>
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:47.13-47.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:47.13-47.14> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top_xx(s, y);
      input [2:0] s;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        casex (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:41.1-49.10> str='\top_xx' basic_prep
      AST_WIRE <tests/simple_tests/Casezx/top.sv:41.33-41.34> str='\s' input logic basic_prep port=9 range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:41.27-41.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:41.55-41.56> str='\y' output logic reg basic_prep port=10 range=[1:0] multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:41.49-41.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:42.1-48.9> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:42.1-48.9> basic_prep
          AST_CASE <tests/simple_tests/Casezx/top.sv:43.2-48.9> basic_prep
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:43.9-43.10> str='\s' basic_prep
            AST_CONDX <tests/simple_tests/Casezx/top.sv:44.3-44.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:44.12-44.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:44.12-44.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) basic_prep range=[1:0] int=3
            AST_CONDX <tests/simple_tests/Casezx/top.sv:45.3-45.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:45.12-45.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:45.12-45.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
            AST_CONDX <tests/simple_tests/Casezx/top.sv:46.3-46.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:46.12-46.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:46.12-46.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_CONDX <tests/simple_tests/Casezx/top.sv:47.3-47.22> basic_prep
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:47.13-47.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:47.13-47.14> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) basic_prep range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top_xx(s, y);
      input [2:0] s;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        casex (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `\top_zx'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:21.1-29.10> str='\top_zx'
      AST_WIRE <tests/simple_tests/Casezx/top.sv:21.33-21.34> str='\s' input logic port=5 multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:21.27-21.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:21.55-21.56> str='\y' output logic port=6 multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:21.49-21.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:22.1-28.9>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:22.1-28.9>
          AST_CASE <tests/simple_tests/Casezx/top.sv:23.2-28.9>
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:23.9-23.10> str='\s'
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:24.3-24.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1xx'(3) range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:24.12-24.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:24.12-24.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) range=[1:0] int=3
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:25.3-25.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01x'(3) range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:25.12-25.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:25.12-25.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:26.3-26.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:26.12-26.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:26.12-26.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:27.3-27.22>
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0>
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:27.13-27.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:27.13-27.14> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top_zx(s, y);
      input [2:0] s;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        casez (s)
          3'b 1xx:
            y = 2'b 11;
          3'b 01x:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:21.1-29.10> str='\top_zx' basic_prep
      AST_WIRE <tests/simple_tests/Casezx/top.sv:21.33-21.34> str='\s' input logic basic_prep port=5 range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:21.27-21.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:21.55-21.56> str='\y' output logic reg basic_prep port=6 range=[1:0] multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:21.49-21.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:22.1-28.9> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:22.1-28.9> basic_prep
          AST_CASE <tests/simple_tests/Casezx/top.sv:23.2-28.9> basic_prep
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:23.9-23.10> str='\s' basic_prep
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:24.3-24.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1xx'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:24.12-24.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:24.12-24.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) basic_prep range=[1:0] int=3
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:25.3-25.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01x'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:25.12-25.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:25.12-25.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:26.3-26.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:26.12-26.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:26.12-26.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_CONDZ <tests/simple_tests/Casezx/top.sv:27.3-27.22> basic_prep
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:27.13-27.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:27.13-27.14> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) basic_prep range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top_zx(s, y);
      input [2:0] s;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        casez (s)
          3'b 1xx:
            y = 2'b 11;
          3'b 01x:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `\top_xa'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:31.1-39.10> str='\top_xa'
      AST_WIRE <tests/simple_tests/Casezx/top.sv:31.33-31.34> str='\s' input logic port=7 multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:31.27-31.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:31.55-31.56> str='\y' output logic port=8 multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:31.49-31.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:32.1-38.9>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:32.1-38.9>
          AST_CASE <tests/simple_tests/Casezx/top.sv:33.2-38.9>
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:33.9-33.10> str='\s'
            AST_CONDX <tests/simple_tests/Casezx/top.sv:34.3-34.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:34.12-34.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:34.12-34.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) range=[1:0] int=3
            AST_CONDX <tests/simple_tests/Casezx/top.sv:35.3-35.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:35.12-35.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:35.12-35.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
            AST_CONDX <tests/simple_tests/Casezx/top.sv:36.3-36.22>
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:36.12-36.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:36.12-36.13> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_CONDX <tests/simple_tests/Casezx/top.sv:37.3-37.22>
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0>
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:37.13-37.21>
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:37.13-37.14> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top_xa(s, y);
      input [2:0] s;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        casex (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/Casezx/top.sv:31.1-39.10> str='\top_xa' basic_prep
      AST_WIRE <tests/simple_tests/Casezx/top.sv:31.33-31.34> str='\s' input logic basic_prep port=7 range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:31.27-31.32> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/Casezx/top.sv:31.55-31.56> str='\y' output logic reg basic_prep port=8 range=[1:0] multirange=[ 0 2 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/Casezx/top.sv:31.49-31.54> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/Casezx/top.sv:32.1-38.9> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/Casezx/top.sv:32.1-38.9> basic_prep
          AST_CASE <tests/simple_tests/Casezx/top.sv:33.2-38.9> basic_prep
            AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:33.9-33.10> str='\s' basic_prep
            AST_CONDX <tests/simple_tests/Casezx/top.sv:34.3-34.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='1??'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:34.12-34.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:34.12-34.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='11'(2) basic_prep range=[1:0] int=3
            AST_CONDX <tests/simple_tests/Casezx/top.sv:35.3-35.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01?'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:35.12-35.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:35.12-35.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
            AST_CONDX <tests/simple_tests/Casezx/top.sv:36.3-36.22> basic_prep
              AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:36.12-36.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:36.12-36.13> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_CONDX <tests/simple_tests/Casezx/top.sv:37.3-37.22> basic_prep
              AST_DEFAULT <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/Casezx/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/Casezx/top.sv:37.13-37.21> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/Casezx/top.sv:37.13-37.14> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/Casezx/top.sv:0.0-0.0> bits='00'(2) basic_prep range=[1:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top_xa(s, y);
      input [2:0] s;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        casex (s)
          3'b 1--:
            y = 2'b 11;
          3'b 01-:
            y = 2'b 10;
          3'b 001:
            y = 2'b 01;
          default:
            y = 2'b 00;
        endcase
    endmodule
--- END OF AST DUMP ---

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/Casezx/top.sv:32$6 in module top_xa.
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/Casezx/top.sv:22$5 in module top_zx.
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/Casezx/top.sv:42$4 in module top_xx.
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/Casezx/top.sv:12$3 in module top_zz.
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/Casezx/top.sv:52$2 in module top_xz.
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/Casezx/top.sv:2$1 in module top_za.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top_xa.$proc$tests/simple_tests/Casezx/top.sv:32$6'.
     1/1: $1\y[1:0]
Creating decoders for process `\top_zx.$proc$tests/simple_tests/Casezx/top.sv:22$5'.
     1/1: $1\y[1:0]
Creating decoders for process `\top_xx.$proc$tests/simple_tests/Casezx/top.sv:42$4'.
     1/1: $1\y[1:0]
Creating decoders for process `\top_zz.$proc$tests/simple_tests/Casezx/top.sv:12$3'.
     1/1: $1\y[1:0]
Creating decoders for process `\top_xz.$proc$tests/simple_tests/Casezx/top.sv:52$2'.
     1/1: $1\y[1:0]
Creating decoders for process `\top_za.$proc$tests/simple_tests/Casezx/top.sv:2$1'.
     1/1: $1\y[1:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top_xa.\y' from process `\top_xa.$proc$tests/simple_tests/Casezx/top.sv:32$6'.
No latch inferred for signal `\top_zx.\y' from process `\top_zx.$proc$tests/simple_tests/Casezx/top.sv:22$5'.
No latch inferred for signal `\top_xx.\y' from process `\top_xx.$proc$tests/simple_tests/Casezx/top.sv:42$4'.
No latch inferred for signal `\top_zz.\y' from process `\top_zz.$proc$tests/simple_tests/Casezx/top.sv:12$3'.
No latch inferred for signal `\top_xz.\y' from process `\top_xz.$proc$tests/simple_tests/Casezx/top.sv:52$2'.
No latch inferred for signal `\top_za.\y' from process `\top_za.$proc$tests/simple_tests/Casezx/top.sv:2$1'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top_xa.$proc$tests/simple_tests/Casezx/top.sv:32$6'.
Removing empty process `top_xa.$proc$tests/simple_tests/Casezx/top.sv:32$6'.
Found and cleaned up 1 empty switch in `\top_zx.$proc$tests/simple_tests/Casezx/top.sv:22$5'.
Removing empty process `top_zx.$proc$tests/simple_tests/Casezx/top.sv:22$5'.
Found and cleaned up 1 empty switch in `\top_xx.$proc$tests/simple_tests/Casezx/top.sv:42$4'.
Removing empty process `top_xx.$proc$tests/simple_tests/Casezx/top.sv:42$4'.
Found and cleaned up 1 empty switch in `\top_zz.$proc$tests/simple_tests/Casezx/top.sv:12$3'.
Removing empty process `top_zz.$proc$tests/simple_tests/Casezx/top.sv:12$3'.
Found and cleaned up 1 empty switch in `\top_xz.$proc$tests/simple_tests/Casezx/top.sv:52$2'.
Removing empty process `top_xz.$proc$tests/simple_tests/Casezx/top.sv:52$2'.
Found and cleaned up 1 empty switch in `\top_za.$proc$tests/simple_tests/Casezx/top.sv:2$1'.
Removing empty process `top_za.$proc$tests/simple_tests/Casezx/top.sv:2$1'.
Cleaned up 6 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_xa.
Optimizing module top_zx.
Optimizing module top_xx.
Optimizing module top_zz.
Optimizing module top_xz.
Optimizing module top_za.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_xa.
Optimizing module top_zx.
Optimizing module top_xx.
Optimizing module top_zz.
Optimizing module top_xz.
Optimizing module top_za.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_xa'.
Finding identical cells in module `\top_zx'.
Finding identical cells in module `\top_xx'.
Finding identical cells in module `\top_zz'.
Finding identical cells in module `\top_xz'.
Finding identical cells in module `\top_za'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_xa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_zx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_xx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_zz..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_xz..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_za..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_xa.
  Optimizing cells in module \top_zx.
  Optimizing cells in module \top_xx.
  Optimizing cells in module \top_zz.
  Optimizing cells in module \top_xz.
  Optimizing cells in module \top_za.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_xa'.
Finding identical cells in module `\top_zx'.
Finding identical cells in module `\top_xx'.
Finding identical cells in module `\top_zz'.
Finding identical cells in module `\top_xz'.
Finding identical cells in module `\top_za'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_xa..
Finding unused cells or wires in module \top_zx..
Finding unused cells or wires in module \top_xx..
Finding unused cells or wires in module \top_zz..
Finding unused cells or wires in module \top_xz..
Finding unused cells or wires in module \top_za..
Removed 0 unused cells and 23 unused wires.
<suppressed ~6 debug messages>

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_xa.
Optimizing module top_xx.
Optimizing module top_xz.
Optimizing module top_za.
Optimizing module top_zx.
Optimizing module top_zz.

4.10. Rerunning OPT passes. (Maybe there is more to do..)

4.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_xa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_xx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_xz..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_za..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_zx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_zz..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_xa.
  Optimizing cells in module \top_xx.
  Optimizing cells in module \top_xz.
  Optimizing cells in module \top_za.
  Optimizing cells in module \top_zx.
  Optimizing cells in module \top_zz.
Performed a total of 0 changes.

4.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_xa'.
Finding identical cells in module `\top_xx'.
Finding identical cells in module `\top_xz'.
Finding identical cells in module `\top_za'.
Finding identical cells in module `\top_zx'.
Finding identical cells in module `\top_zz'.
Removed a total of 0 cells.

4.14. Executing OPT_SHARE pass.

4.15. Executing OPT_DFF pass (perform DFF optimizations).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_xa..
Finding unused cells or wires in module \top_xx..
Finding unused cells or wires in module \top_xz..
Finding unused cells or wires in module \top_za..
Finding unused cells or wires in module \top_zx..
Finding unused cells or wires in module \top_zz..

4.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_xa.
Optimizing module top_xx.
Optimizing module top_xz.
Optimizing module top_za.
Optimizing module top_zx.
Optimizing module top_zz.

4.18. Finished OPT passes. (There is nothing left to do.)

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: out/asan/bin/../share/yosys/techmap.v
Parsing Verilog input from `out/asan/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~147 debug messages>

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\top_xa' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 29 wires to a netlist network with 3 inputs and 2 outputs.

6.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

6.2. Extracting gate netlist of module `\top_xx' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 29 wires to a netlist network with 3 inputs and 2 outputs.

6.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

6.3. Extracting gate netlist of module `\top_xz' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 29 wires to a netlist network with 3 inputs and 2 outputs.

6.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

6.4. Extracting gate netlist of module `\top_za' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 29 wires to a netlist network with 3 inputs and 2 outputs.

6.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

6.5. Extracting gate netlist of module `\top_zx' to `<abc-temp-dir>/input.blif'..
Replacing 3 occurrences of constant undef bits with constant zero bits
Extracted 32 gates and 38 wires to a netlist network with 3 inputs and 2 outputs.

6.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        2
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

6.6. Extracting gate netlist of module `\top_zz' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 29 wires to a netlist network with 3 inputs and 2 outputs.

6.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.
Removed 0 unused cells and 216 unused wires.

7. Executing Verilog backend.

7.1. Executing BMUXMAP pass.

7.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.36+72 (git sha1 22370ad21, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\top_xa'.

module top_xa(s, y);
  wire _0_;
  input [2:0] s;
  wire [2:0] s;
  output [1:0] y;
  wire [1:0] y;
  assign _0_ = s[0] & ~(s[1]);
  assign y[0] = s[2] | _0_;
  assign y[1] = s[2] | s[1];
endmodule
Dumping module `\top_xx'.

module top_xx(s, y);
  wire _0_;
  input [2:0] s;
  wire [2:0] s;
  output [1:0] y;
  wire [1:0] y;
  assign _0_ = s[0] & ~(s[1]);
  assign y[0] = s[2] | _0_;
  assign y[1] = s[2] | s[1];
endmodule
Dumping module `\top_xz'.

module top_xz(s, y);
  wire _0_;
  input [2:0] s;
  wire [2:0] s;
  output [1:0] y;
  wire [1:0] y;
  assign _0_ = s[0] & ~(s[1]);
  assign y[0] = s[2] | _0_;
  assign y[1] = s[2] | s[1];
endmodule
Dumping module `\top_za'.

module top_za(s, y);
  wire _0_;
  input [2:0] s;
  wire [2:0] s;
  output [1:0] y;
  wire [1:0] y;
  assign _0_ = s[0] & ~(s[1]);
  assign y[0] = s[2] | _0_;
  assign y[1] = s[2] | s[1];
endmodule
Dumping module `\top_zx'.

module top_zx(s, y);
  wire _0_;
  wire _1_;
  input [2:0] s;
  wire [2:0] s;
  output [1:0] y;
  wire [1:0] y;
  assign _0_ = s[0] ^ s[2];
  assign y[0] = _0_ & ~(s[1]);
  assign _1_ = s[1] ^ s[2];
  assign y[1] = _1_ & ~(s[0]);
endmodule
Dumping module `\top_zz'.

module top_zz(s, y);
  wire _0_;
  input [2:0] s;
  wire [2:0] s;
  output [1:0] y;
  wire [1:0] y;
  assign _0_ = s[0] & ~(s[1]);
  assign y[0] = s[2] | _0_;
  assign y[1] = s[2] | s[1];
endmodule

Yosys 0.36+72 (git sha1 22370ad21, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
