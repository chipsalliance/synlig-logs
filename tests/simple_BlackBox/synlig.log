1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/BlackBox/cells.sv:2:1: Compile module "work@I_BUF".
[INF:CP0303] tests/simple_tests/BlackBox/dut.sv:1:1: Compile module "work@dut".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/BlackBox/dut.sv:1:1: Top level module "work@dut".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 2.
[NTE:EL0510] Nb instances: 3.
[NTE:EL0511] Nb leaf instances: 2.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@dut' of type 'design'
  Object 'builtin' of type 'package'
  Object 'work@dut' of type 'module_inst'
    Object 'clk' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'I' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'EN' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'O1' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'O2' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'clk' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'I' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'EN' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'O1' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'O2' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'ibuf1' of type 'module_inst'
      Object 'WEAK_KEEPER' of type 'parameter'
      Object 'DRIVE' of type 'parameter'
      Object '' of type 'param_assign'
        Object 'WEAK_KEEPER' of type 'parameter'
        Object '' of type 'constant'
      Object '' of type 'param_assign'
        Object 'DRIVE' of type 'parameter'
        Object '' of type 'constant'
      Object 'I' of type 'port'
        Object '' of type 'logic_typespec'
      Object 'EN' of type 'port'
        Object '' of type 'logic_typespec'
      Object 'O' of type 'port'
        Object '' of type 'logic_typespec'
      Object 'I' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'EN' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'O' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'I' of type 'ref_obj'
      Object 'EN' of type 'ref_obj'
      Object 'O1' of type 'ref_obj'
    Object 'ibuf2' of type 'module_inst'
      Object 'WEAK_KEEPER' of type 'parameter'
      Object 'DRIVE' of type 'parameter'
      Object '' of type 'param_assign'
        Object 'WEAK_KEEPER' of type 'parameter'
        Object '' of type 'constant'
      Object '' of type 'param_assign'
        Object 'DRIVE' of type 'parameter'
        Object '' of type 'constant'
      Object 'I' of type 'port'
        Object '' of type 'logic_typespec'
      Object 'EN' of type 'port'
        Object '' of type 'logic_typespec'
      Object 'O' of type 'port'
        Object '' of type 'logic_typespec'
      Object 'I' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'EN' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'O' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'I' of type 'ref_obj'
      Object 'EN' of type 'ref_obj'
      Object 'O2' of type 'ref_obj'
Generating RTLIL representation for module `\dut'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/BlackBox/dut.sv:1.1-9.10> str='\dut'
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:1.24-1.27> str='\clk' input logic port=1 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:1.41-1.42> str='\I' input logic port=2 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:2.13-2.15> str='\EN' input logic port=3 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:3.14-3.16> str='\O1' output logic port=4 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:3.18-3.20> str='\O2' output logic port=5 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_CELL <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\ibuf1'
        AST_CELLTYPE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> str='$paramod$c14ed307a80a789ce3822dd7f7eccec5b534ff84\I_BUF'
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\I'
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:5.13-5.14> str='\I'
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\EN'
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:5.16-5.18> str='\EN'
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\O'
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:5.20-5.22> str='\O1'
      AST_CELL <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\ibuf2'
        AST_CELLTYPE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> str='$paramod$d83ef2cc044d808de0734812880a46511c2088ba\I_BUF'
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\I'
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:7.40-7.41> str='\I'
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\EN'
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:7.43-7.45> str='\EN'
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\O'
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:7.47-7.49> str='\O2'
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module dut(clk, I, EN, O1, O2);
      input [0:0] clk;
      input [0:0] I;
      input [0:0] EN;
      output [0:0] O1;
      output [0:0] O2;
      /** AST_CELL **/
      /** AST_CELL **/
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/BlackBox/dut.sv:1.1-9.10> str='\dut' basic_prep
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:1.24-1.27> str='\clk' input logic basic_prep port=1 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:1.41-1.42> str='\I' input logic basic_prep port=2 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:2.13-2.15> str='\EN' input logic basic_prep port=3 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:3.14-3.16> str='\O1' output logic basic_prep port=4 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/BlackBox/dut.sv:3.18-3.20> str='\O2' output logic basic_prep port=5 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_CELL <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\ibuf1' basic_prep
        AST_CELLTYPE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> str='$paramod$c14ed307a80a789ce3822dd7f7eccec5b534ff84\I_BUF' basic_prep
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\I' basic_prep
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:5.13-5.14> str='\I' basic_prep
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\EN' basic_prep
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:5.16-5.18> str='\EN' basic_prep
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:5.1-5.24> str='\O' basic_prep
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:5.20-5.22> str='\O1' basic_prep
      AST_CELL <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\ibuf2' basic_prep
        AST_CELLTYPE <tests/simple_tests/BlackBox/dut.sv:0.0-0.0> str='$paramod$d83ef2cc044d808de0734812880a46511c2088ba\I_BUF' basic_prep
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\I' basic_prep
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:7.40-7.41> str='\I' basic_prep
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\EN' basic_prep
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:7.43-7.45> str='\EN' basic_prep
        AST_ARGUMENT <tests/simple_tests/BlackBox/dut.sv:7.1-7.51> str='\O' basic_prep
          AST_IDENTIFIER <tests/simple_tests/BlackBox/dut.sv:7.47-7.49> str='\O2' basic_prep
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module dut(clk, I, EN, O1, O2);
      input [0:0] clk;
      input [0:0] I;
      input [0:0] EN;
      output [0:0] O1;
      output [0:0] O2;
      /** AST_CELL **/
      /** AST_CELL **/
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \dut

2.1.2. Analyzing design hierarchy..
Top module:  \dut
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.6. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Warning: Wire dut.\O2 is used but has no driver.
Warning: Wire dut.\O1 is used but has no driver.
Found and reported 2 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dut.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== dut ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of ports:                  5
   Number of port bits:              5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $paramod$c14ed307a80a789ce3822dd7f7eccec5b534ff84\I_BUF      1
     $paramod$d83ef2cc044d808de0734812880a46511c2088ba\I_BUF      1

2.13. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Warning: Wire dut.\O2 is used but has no driver.
Warning: Wire dut.\O1 is used but has no driver.
Found and reported 2 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Synlig (git sha1 820d7f066, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\dut'.

(* top =  1  *)
(* src = "tests/simple_tests/BlackBox/dut.sv:1.1-9.10" *)
module dut(clk, I, EN, O1, O2);
  (* src = "tests/simple_tests/BlackBox/dut.sv:2.13-2.15" *)
  input EN;
  wire EN;
  (* src = "tests/simple_tests/BlackBox/dut.sv:1.41-1.42" *)
  input I;
  wire I;
  (* src = "tests/simple_tests/BlackBox/dut.sv:3.14-3.16" *)
  output O1;
  wire O1;
  (* src = "tests/simple_tests/BlackBox/dut.sv:3.18-3.20" *)
  output O2;
  wire O2;
  (* src = "tests/simple_tests/BlackBox/dut.sv:1.24-1.27" *)
  input clk;
  wire clk;
  (* module_not_derived = 32'd1 *)
  (* src = "tests/simple_tests/BlackBox/dut.sv:5.1-5.24" *)
  \$paramod$c14ed307a80a789ce3822dd7f7eccec5b534ff84\I_BUF  ibuf1 (
    .EN(EN),
    .I(I),
    .O(O1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "tests/simple_tests/BlackBox/dut.sv:7.1-7.51" *)
  \$paramod$d83ef2cc044d808de0734812880a46511c2088ba\I_BUF  ibuf2 (
    .EN(EN),
    .I(I),
    .O(O2)
  );
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\dut'.

Warnings: 2 unique messages, 4 total
