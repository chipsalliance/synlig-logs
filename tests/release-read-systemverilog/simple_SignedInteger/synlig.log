1. Executing SystemVerilog frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/SignedInteger/dut.sv:1:1: Compile module "work@dut".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/SignedInteger/dut.sv:1:1: Top level module "work@dut".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 0.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@dut' of type 'design'
  Object 'builtin' of type 'package'
  Object 'work@dut' of type 'module_inst'
    Object 'ENTSEL' of type 'parameter'
    Object 'ENTNUM' of type 'parameter'
    Object '' of type 'param_assign'
      Object 'ENTSEL' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'ENTNUM' of type 'parameter'
      Object '' of type 'constant'
    Object 'i' of type 'integer_var'
    Object 'clk' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'in' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'out' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'en' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'clk' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'in' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'out' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'en' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object '' of type 'always'
      Object '' of type 'event_control'
        Object '' of type 'begin'
          Object '' of type 'assignment'
            Object 'out' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'en' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'for_stmt'
            Object '' of type 'assignment'
              Object 'i' of type 'ref_var'
              Object '' of type 'operation'
                Object 'ENTNUM' of type 'ref_obj'
                Object '' of type 'constant'
            Object '' of type 'operation'
              Object 'i' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'assignment'
              Object 'i' of type 'ref_obj'
              Object '' of type 'operation'
                Object 'i' of type 'ref_obj'
                Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'if_stmt'
                Object 'in' of type 'bit_select'
                  Object 'i' of type 'ref_obj'
                Object '' of type 'begin'
                  Object '' of type 'assignment'
                    Object 'out' of type 'ref_obj'
                    Object 'i' of type 'ref_obj'
                  Object '' of type 'assignment'
                    Object 'en' of type 'ref_obj'
                    Object '' of type 'constant'
Generating RTLIL representation for module `\dut'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/SignedInteger/dut.sv:1.1-26.10> str='\dut'
      AST_PARAMETER <tests/simple_tests/SignedInteger/dut.sv:2.19-2.29> str='\ENTSEL' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) range=[31:0] int=2 in_param
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/SignedInteger/dut.sv:3.19-3.29> str='\ENTNUM' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000100'(32) range=[31:0] int=4 in_param
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:12.17-12.18> str='\i' signed
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:6.16-6.19> str='\clk' input logic port=1 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:7.28-7.30> str='\in' input logic port=2 dimensions=[3:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:7.15-7.27> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:8.28-8.31> str='\out' output reg port=3 dimensions=[1:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:8.15-8.27> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:9.28-9.30> str='\en' output reg port=4 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/SignedInteger/dut.sv:13.4-24.7>
        AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:13.11-13.16>
          AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:13.17-24.7>
            AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:14.7-14.14>
              AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:14.7-14.10> str='\out' in_lvalue
              AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
            AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:15.7-15.13>
              AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:15.7-15.9> str='\en' in_lvalue
              AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
            AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:17.7-17.10> str='$fordecl_block0'
              AST_FOR <tests/simple_tests/SignedInteger/dut.sv:17.7-17.10> str='$loop0'
                AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:17.12-17.24>
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:17.12-17.13> str='\i' in_lvalue
                  AST_SUB <tests/simple_tests/SignedInteger/dut.sv:17.16-17.24>
                    AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:17.16-17.22> str='\ENTNUM'
                    AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                AST_GE <tests/simple_tests/SignedInteger/dut.sv:17.26-17.32> in_param
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:17.26-17.27> str='\i' in_param
                  AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
                AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:17.35-17.44>
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:17.35-17.36> str='\i' in_lvalue
                  AST_SUB <tests/simple_tests/SignedInteger/dut.sv:17.39-17.44>
                    AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:17.39-17.40> str='\i'
                    AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:17.46-22.10> str='$loop0'
                  AST_CASE <tests/simple_tests/SignedInteger/dut.sv:18.3-21.6>
                    AST_REDUCE_BOOL <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0>
                      AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> str='\in'
                        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11>
                          AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> str='\i'
                    AST_COND <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0>
                      AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='1'(1) range=[0:0] int=1
                      AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0>
                        AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:18.14-21.6>
                          AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:19.6-19.13>
                            AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:19.6-19.9> str='\out' in_lvalue
                            AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:19.12-19.13> str='\i'
                          AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:20.6-20.12>
                            AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:20.6-20.8> str='\en' in_lvalue
                            AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module dut(clk, in, out, en);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      wire signed [31:0] i;
      input [0:0] clk;
      input [3:0] in;
      output reg [1:0] out;
      output reg [0:0] en;
      always @*
        begin
          out = 0;
          en = 0;
          /** AST_FOR **/
        end
    endmodule
--- END OF AST DUMP ---
Warning: wire '\i' is assigned in a block at tests/simple_tests/SignedInteger/dut.sv:17.12-17.24.
Warning: wire '\i' is assigned in a block at tests/simple_tests/SignedInteger/dut.sv:17.35-17.44.
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/SignedInteger/dut.sv:1.1-26.10> str='\dut' basic_prep
      AST_PARAMETER <tests/simple_tests/SignedInteger/dut.sv:2.19-2.29> str='\ENTSEL' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/SignedInteger/dut.sv:3.19-3.29> str='\ENTNUM' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000100'(32) basic_prep range=[31:0] int=4 in_param
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:12.17-12.18> str='\i' signed basic_prep range=[31:0] dimensions=[31:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:6.16-6.19> str='\clk' input logic basic_prep port=1 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:7.28-7.30> str='\in' input logic basic_prep port=2 range=[3:0] dimensions=[3:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:7.15-7.27> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:8.28-8.31> str='\out' output reg basic_prep port=3 range=[1:0] dimensions=[1:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:8.15-8.27> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/SignedInteger/dut.sv:9.28-9.30> str='\en' output reg basic_prep port=4 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/SignedInteger/dut.sv:13.4-24.7> basic_prep
        AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:13.11-13.16> basic_prep
          AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:13.17-24.7> basic_prep
            AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:14.7-14.14> basic_prep
              AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:14.7-14.10> str='\out' basic_prep in_lvalue
              AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
            AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:15.7-15.13> basic_prep
              AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:15.7-15.9> str='\en' basic_prep in_lvalue
              AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
            AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:17.7-17.10> basic_prep
              AST_CASE <tests/simple_tests/SignedInteger/dut.sv:18.3-21.6> basic_prep
                AST_REDUCE_BOOL <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> str='\in' basic_prep int=1
                    AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> basic_prep range=[3:3]
                      AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> bits='00000000000000000000000000000011'(32) basic_prep range=[31:0] int=3
                AST_COND <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:18.14-21.6> basic_prep
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:19.6-19.13> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:19.6-19.9> str='\out' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:19.12-19.13> bits='00000000000000000000000000000011'(32) basic_prep range=[31:0] int=3
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:20.6-20.12> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:20.6-20.8> str='\en' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
              AST_CASE <tests/simple_tests/SignedInteger/dut.sv:18.3-21.6> basic_prep
                AST_REDUCE_BOOL <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> str='\in' basic_prep int=1
                    AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> basic_prep range=[2:2]
                      AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
                AST_COND <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:18.14-21.6> basic_prep
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:19.6-19.13> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:19.6-19.9> str='\out' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:19.12-19.13> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:20.6-20.12> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:20.6-20.8> str='\en' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
              AST_CASE <tests/simple_tests/SignedInteger/dut.sv:18.3-21.6> basic_prep
                AST_REDUCE_BOOL <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> str='\in' basic_prep int=1
                    AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> basic_prep range=[1:1]
                      AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
                AST_COND <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:18.14-21.6> basic_prep
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:19.6-19.13> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:19.6-19.9> str='\out' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:19.12-19.13> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:20.6-20.12> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:20.6-20.8> str='\en' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
              AST_CASE <tests/simple_tests/SignedInteger/dut.sv:18.3-21.6> basic_prep
                AST_REDUCE_BOOL <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> str='\in' basic_prep int=1
                    AST_RANGE <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> basic_prep range=[0:0]
                      AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:18.10-18.11> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
                AST_COND <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                  AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/SignedInteger/dut.sv:18.14-21.6> basic_prep
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:19.6-19.13> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:19.6-19.9> str='\out' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:19.12-19.13> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
                      AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:20.6-20.12> basic_prep
                        AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:20.6-20.8> str='\en' basic_prep in_lvalue
                        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
              AST_ASSIGN_EQ <tests/simple_tests/SignedInteger/dut.sv:17.35-17.44> basic_prep
                AST_IDENTIFIER <tests/simple_tests/SignedInteger/dut.sv:17.35-17.36> str='\i' basic_prep in_lvalue
                AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:17.39-17.44> bits='11111111111111111111111111111111'(32) signed basic_prep range=[31:0] int=4294967295
              AST_FOR <tests/simple_tests/SignedInteger/dut.sv:17.7-17.10> str='$loop0' basic_prep
      AST_LOCALPARAM <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> str='$fordecl_block0.$loop0[3].i' basic_prep in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:17.16-17.24> bits='00000000000000000000000000000011'(32) basic_prep range=[31:0] int=3 in_param
      AST_LOCALPARAM <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> str='$fordecl_block0.$loop0[2].i' basic_prep in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:17.39-17.44> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
      AST_LOCALPARAM <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> str='$fordecl_block0.$loop0[1].i' basic_prep in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:17.39-17.44> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
      AST_LOCALPARAM <tests/simple_tests/SignedInteger/dut.sv:0.0-0.0> str='$fordecl_block0.$loop0[0].i' basic_prep in_param
        AST_CONSTANT <tests/simple_tests/SignedInteger/dut.sv:17.39-17.44> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module dut(clk, in, out, en);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_LOCALPARAM **/
      /** AST_LOCALPARAM **/
      /** AST_LOCALPARAM **/
      /** AST_LOCALPARAM **/
      wire signed [31:0] i;
      input [0:0] clk;
      input [3:0] in;
      output reg [1:0] out;
      output reg [0:0] en;
      always @*
        begin
          out = 0;
          en = 0;
          begin
            case (|(in[3:3]))
              1'b 1:
                begin
                  out = 3;
                  en = 1;
                end
            endcase
            case (|(in[2:2]))
              1'b 1:
                begin
                  out = 2;
                  en = 1;
                end
            endcase
            case (|(in[1:1]))
              1'b 1:
                begin
                  out = 1;
                  en = 1;
                end
            endcase
            case (|(in[0:0]))
              1'b 1:
                begin
                  out = 0;
                  en = 1;
                end
            endcase
            i = -1;
            /** AST_FOR **/
          end
        end
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \dut

2.1.2. Analyzing design hierarchy..
Top module:  \dut
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$tests/simple_tests/SignedInteger/dut.sv:13$1 in module dut.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dut.$proc$tests/simple_tests/SignedInteger/dut.sv:13$1'.
     1/8: $4\en[0:0]
     2/8: $4\out[1:0]
     3/8: $3\en[0:0]
     4/8: $3\out[1:0]
     5/8: $2\en[0:0]
     6/8: $2\out[1:0]
     7/8: $1\en[0:0]
     8/8: $1\out[1:0]

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dut.\out' from process `\dut.$proc$tests/simple_tests/SignedInteger/dut.sv:13$1'.
No latch inferred for signal `\dut.\en' from process `\dut.$proc$tests/simple_tests/SignedInteger/dut.sv:13$1'.
No latch inferred for signal `\dut.\i' from process `\dut.$proc$tests/simple_tests/SignedInteger/dut.sv:13$1'.

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\dut.$proc$tests/simple_tests/SignedInteger/dut.sv:13$1'.
Removing empty process `dut.$proc$tests/simple_tests/SignedInteger/dut.sv:13$1'.
Cleaned up 4 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dut.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== dut ===

   Number of wires:                 11
   Number of wire bits:             49
   Number of public wires:           5
   Number of public wire bits:      40
   Number of ports:                  4
   Number of port bits:              8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $mux                            8

2.13. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Found and reported 0 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Synlig (git sha1 97ac61ab9, g++ 12.2.0-14 -fPIC -O3) */
Dumping module `\dut'.

(* top =  1  *)
(* src = "tests/simple_tests/SignedInteger/dut.sv:1.1-26.10" *)
module dut(clk, in, out, en);
  (* src = "tests/simple_tests/SignedInteger/dut.sv:13.4-24.7" *)
  wire _00_;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:13.4-24.7" *)
  wire [1:0] _01_;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:13.4-24.7" *)
  wire _02_;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:13.4-24.7" *)
  wire [1:0] _03_;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:13.4-24.7" *)
  wire _04_;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:13.4-24.7" *)
  wire [1:0] _05_;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:6.16-6.19" *)
  input clk;
  wire clk;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:9.28-9.30" *)
  output en;
  wire en;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:12.17-12.18" *)
  wire [31:0] i;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:7.28-7.30" *)
  input [3:0] in;
  wire [3:0] in;
  (* src = "tests/simple_tests/SignedInteger/dut.sv:8.28-8.31" *)
  output [1:0] out;
  wire [1:0] out;
  assign _05_ = in[1] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 2'h1 : _03_;
  assign _02_ = in[2] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 1'h1 : _00_;
  assign _03_ = in[2] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 2'h2 : _01_;
  assign _00_ = in[3] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 1'h1 : 1'h0;
  assign _01_ = in[3] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 2'h3 : 2'h0;
  assign en = in[0] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 1'h1 : _04_;
  assign out = in[0] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 2'h0 : _05_;
  assign _04_ = in[1] ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/SignedInteger/dut.sv:0.0-0.0|tests/simple_tests/SignedInteger/dut.sv:18.3-21.6" *) 1'h1 : _02_;
  assign i = 32'd4294967295;
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\dut'.

5. Executing SIM pass (simulate the circuit).
Simulating cycle 0.
Simulating cycle 1.
Simulating cycle 2.
Simulating cycle 3.
Simulating cycle 4.
Simulating cycle 5.
Simulating cycle 6.
Simulating cycle 7.
Simulating cycle 8.
Simulating cycle 9.
Simulating cycle 10.
Simulating cycle 11.
Simulating cycle 12.
Simulating cycle 13.
Simulating cycle 14.
Simulating cycle 15.
Simulating cycle 16.
Simulating cycle 17.
Simulating cycle 18.
Simulating cycle 19.
Simulating cycle 20.
Simulating cycle 21.
Simulating cycle 22.
Simulating cycle 23.
Simulating cycle 24.
Simulating cycle 25.
Simulating cycle 26.
Simulating cycle 27.
Simulating cycle 28.
Simulating cycle 29.
Simulating cycle 30.
Simulating cycle 31.
Simulating cycle 32.
Simulating cycle 33.
Simulating cycle 34.
Simulating cycle 35.
Simulating cycle 36.
Simulating cycle 37.
Simulating cycle 38.
Simulating cycle 39.
Simulating cycle 40.

Warnings: 2 unique messages, 2 total
