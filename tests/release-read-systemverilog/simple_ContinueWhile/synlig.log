1. Executing SystemVerilog frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/ContinueWhile/top.sv:1:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/ContinueWhile/top.sv:1:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 1.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object 'work@top' of type 'module_inst'
    Object 'test_while' of type 'function'
      Object '' of type 'int_var'
      Object 'x' of type 'io_decl'
        Object '' of type 'int_typespec'
      Object '' of type 'begin'
        Object '' of type 'while_stmt'
          Object '' of type 'operation'
            Object 'x' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'begin'
            Object '' of type 'if_stmt'
              Object '' of type 'operation'
                Object 'x' of type 'ref_obj'
                Object '' of type 'constant'
              Object '' of type 'continue_stmt'
            Object '' of type 'assignment'
              Object 'x' of type 'ref_obj'
              Object '' of type 'operation'
                Object 'x' of type 'ref_obj'
                Object '' of type 'constant'
        Object '' of type 'return_stmt'
          Object 'x' of type 'ref_obj'
    Object 'test_while' of type 'function'
      Object '' of type 'int_var'
      Object 'x' of type 'io_decl'
        Object '' of type 'int_typespec'
      Object '' of type 'begin'
        Object '' of type 'while_stmt'
          Object '' of type 'operation'
            Object 'x' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'begin'
            Object '' of type 'if_stmt'
              Object '' of type 'operation'
                Object 'x' of type 'ref_obj'
                Object '' of type 'constant'
              Object '' of type 'continue_stmt'
            Object '' of type 'assignment'
              Object 'x' of type 'ref_obj'
              Object '' of type 'operation'
                Object 'x' of type 'ref_obj'
                Object '' of type 'constant'
        Object '' of type 'return_stmt'
          Object 'x' of type 'ref_obj'
    Object 'a' of type 'int_var'
    Object 'a' of type 'port'
      Object '' of type 'int_typespec'
    Object '' of type 'initial'
      Object '' of type 'assignment'
        Object 'a' of type 'ref_obj'
        Object 'test_while' of type 'func_call'
          Object '' of type 'constant'
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/ContinueWhile/top.sv:1.1-10.10> str='\top'
      AST_FUNCTION <tests/simple_tests/ContinueWhile/top.sv:2.4-8.15> str='\test_while'
        AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:2.23-2.26> str='\test_while' signed
          AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed range=[31:0] int=31 in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
        AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:2.42-2.43> str='\x' input signed port=2 dimensions=[31:0]
          AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:7.8-7.17>
          AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$whiledecl_block1'
            AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue' reg range=[0:0]
              AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> in_param
                AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0] in_param
                AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0] in_param
              AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0]
            AST_WHILE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$loop1'
              AST_LT <tests/simple_tests/ContinueWhile/top.sv:3.15-3.22>
                AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.15-3.16> str='\x'
                AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000001100100'(32) signed range=[31:0] int=100
              AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:3.24-6.11> str='$loop1'
                AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                  AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue' in_lvalue
                  AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0]
                AST_CASE <tests/simple_tests/ContinueWhile/top.sv:4.12-4.34>
                  AST_REDUCE_BOOL <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                    AST_GT <tests/simple_tests/ContinueWhile/top.sv:4.16-4.23>
                      AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:4.16-4.17> str='\x'
                      AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000001100100'(32) signed range=[31:0] int=100
                  AST_COND <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                    AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='1'(1) range=[0:0] int=1
                    AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                      AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                        AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue' in_lvalue
                        AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1
                AST_CASE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                  AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue'
                  AST_COND <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                    AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
                    AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                      AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:5.12-5.22>
                        AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:5.12-5.13> str='\x' in_lvalue
                        AST_SHIFT_LEFT <tests/simple_tests/ContinueWhile/top.sv:5.16-5.22>
                          AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:5.16-5.17> str='\x'
                          AST_TO_UNSIGNED <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
          AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:7.8-7.14>
            AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> str='\test_while' in_lvalue
            AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:7.15-7.16> str='\x'
      AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:1.23-1.24> str='\a' output signed port=3 dimensions=[31:0]
        AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_INITIAL <tests/simple_tests/ContinueWhile/top.sv:9.4-9.30>
        AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:9.4-9.30>
          AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:9.12-9.29>
            AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:9.12-9.13> str='\a' in_lvalue
            AST_FCALL <tests/simple_tests/ContinueWhile/top.sv:9.16-9.29> str='\test_while'
              AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top(a);
      output signed [31:0] a;
      /** AST_FUNCTION **/
      initial
        a = /** AST_FCALL **/;
    endmodule
--- END OF AST DUMP ---
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.x' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:5.12-5.22.
Warning: wire '\test_while$func$tests/simple_tests/ContinueWhile/top.sv:9$1.$result' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:7.8-7.14.
Warning: wire '\a' is assigned in a block at tests/simple_tests/ContinueWhile/top.sv:9.12-9.29.
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/ContinueWhile/top.sv:1.1-10.10> str='\top' basic_prep
      AST_FUNCTION <tests/simple_tests/ContinueWhile/top.sv:2.4-8.15> str='\test_while'
        AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:2.23-2.26> str='\test_while' signed
          AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed range=[31:0] int=31 in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
        AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:2.42-2.43> str='\x' input signed port=2 dimensions=[31:0]
          AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:7.8-7.17>
          AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$whiledecl_block1'
            AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue' reg range=[0:0]
              AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> in_param
                AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0] in_param
                AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0] in_param
              AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0]
            AST_WHILE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$loop1'
              AST_LT <tests/simple_tests/ContinueWhile/top.sv:3.15-3.22>
                AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.15-3.16> str='\x'
                AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000001100100'(32) signed range=[31:0] int=100
              AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:3.24-6.11> str='$loop1'
                AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                  AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue' in_lvalue
                  AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) range=[31:0]
                AST_CASE <tests/simple_tests/ContinueWhile/top.sv:4.12-4.34>
                  AST_REDUCE_BOOL <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                    AST_GT <tests/simple_tests/ContinueWhile/top.sv:4.16-4.23>
                      AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:4.16-4.17> str='\x'
                      AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000001100100'(32) signed range=[31:0] int=100
                  AST_COND <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                    AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='1'(1) range=[0:0] int=1
                    AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                      AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                        AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue' in_lvalue
                        AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1
                AST_CASE <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                  AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13> str='$continue'
                  AST_COND <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                    AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
                    AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:3.8-3.13>
                      AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:5.12-5.22>
                        AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:5.12-5.13> str='\x' in_lvalue
                        AST_SHIFT_LEFT <tests/simple_tests/ContinueWhile/top.sv:5.16-5.22>
                          AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:5.16-5.17> str='\x'
                          AST_TO_UNSIGNED <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0>
                            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
          AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:7.8-7.14>
            AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> str='\test_while' in_lvalue
            AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:7.15-7.16> str='\x'
      AST_WIRE <tests/simple_tests/ContinueWhile/top.sv:1.23-1.24> str='\a' output signed basic_prep port=3 range=[31:0] dimensions=[31:0]
        AST_RANGE <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_INITIAL <tests/simple_tests/ContinueWhile/top.sv:9.4-9.30> basic_prep
        AST_BLOCK <tests/simple_tests/ContinueWhile/top.sv:9.4-9.30> basic_prep
          AST_ASSIGN_EQ <tests/simple_tests/ContinueWhile/top.sv:9.12-9.29> basic_prep
            AST_IDENTIFIER <tests/simple_tests/ContinueWhile/top.sv:9.12-9.13> str='\a' basic_prep in_lvalue
            AST_CONSTANT <tests/simple_tests/ContinueWhile/top.sv:9.16-9.29> bits='00000000000000000000000010000000'(32) signed basic_prep range=[31:0] int=128
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top(a);
      output signed [31:0] a;
      /** AST_FUNCTION **/
      initial
        a = 128;
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top

2.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$tests/simple_tests/ContinueWhile/top.sv:9$2'.

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\a' from process `\top.$proc$tests/simple_tests/ContinueWhile/top.sv:9$2'.

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$tests/simple_tests/ContinueWhile/top.sv:9$2'.
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== top ===

   Number of wires:                  1
   Number of wire bits:             32
   Number of public wires:           1
   Number of public wire bits:      32
   Number of ports:                  1
   Number of port bits:             32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

2.13. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Synlig (git sha1 44d00f6f2, g++ 12.2.0-14 -fPIC -O3) */
Dumping module `\top'.

(* top =  1  *)
(* src = "tests/simple_tests/ContinueWhile/top.sv:1.1-10.10" *)
module top(a);
  (* src = "tests/simple_tests/ContinueWhile/top.sv:1.23-1.24" *)
  output [31:0] a;
  wire [31:0] a;
  assign a = 32'd128;
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\top'.

5. Executing SIM pass (simulate the circuit).

===== 0 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 5 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 10 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 15 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 20 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 25 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 30 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 35 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 40 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 45 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 50 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 55 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 60 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 65 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 70 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 75 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 80 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 85 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 90 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 95 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 100 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 105 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 110 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 115 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 120 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 125 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 130 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 135 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 140 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 145 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 150 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 155 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 160 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 165 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 170 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 175 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 180 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 185 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 190 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 195 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128

===== 200 =====

-- ph1 --

-- ph2 --

-- ph3 --
[top] get \a: 128
[top] get \a: 128

Warnings: 3 unique messages, 9 total
