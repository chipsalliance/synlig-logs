1. Executing SystemVerilog frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:1:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:1:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 1.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object 'work@top' of type 'module_inst'
    Object 'a' of type 'parameter'
    Object 'b' of type 'parameter'
    Object 'c' of type 'parameter'
    Object 'd' of type 'parameter'
    Object '' of type 'param_assign'
      Object 'a' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'b' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'c' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'd' of type 'parameter'
      Object '' of type 'constant'
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:1.1-8.10> str='\top'
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:4.18-4.24> str='\a' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:5.18-5.24> str='\b' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='11111111111111111111111111111111'(32) signed range=[31:0] int=4294967295 in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:6.18-6.24> str='\c' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'(32) signed unsized range=[31:0] in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:7.18-7.24> str='\d' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'(32) signed unsized range=[31:0] in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top();
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:1.1-8.10> str='\top' basic_prep
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:4.18-4.24> str='\a' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) basic_prep range=[31:0] in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:5.18-5.24> str='\b' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='11111111111111111111111111111111'(32) basic_prep range=[31:0] int=4294967295 in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:6.18-6.24> str='\c' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'(32) unsized basic_prep range=[31:0] in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:7.18-7.24> str='\d' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'(32) unsized basic_prep range=[31:0] in_param
        AST_RANGE <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConstantsParameterParsing/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top();
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top

2.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).

2.6. Executing CHECK pass (checking for obvious problems).
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).

2.7.7. Executing OPT_EXPR pass (perform const folding).

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

2.13. Executing CHECK pass (checking for obvious problems).
Found and reported 0 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Synlig (git sha1 97ac61ab9, g++ 12.2.0-14 -fPIC -O3) */

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.

