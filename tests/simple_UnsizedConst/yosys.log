1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/UnsizedConst/top.sv:3:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/UnsizedConst/top.sv:3:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 1.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object 'work@top' of type 'module_inst'
    Object 'out1' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'out2' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'out3' of type 'port'
      Object 'my_struct_packed_t' of type 'struct_typespec'
        Object 'a' of type 'typespec_member'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
    Object 'out4' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'out1' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'out2' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'out3' of type 'struct_net'
      Object 'my_struct_packed_t' of type 'struct_typespec'
        Object 'a' of type 'typespec_member'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
    Object 'out4' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object '' of type 'cont_assign'
      Object 'out1' of type 'ref_obj'
      Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'out2' of type 'ref_obj'
      Object '' of type 'operation'
        Object 'out1' of type 'ref_obj'
        Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'out3.a' of type 'hier_path'
        Object 'out3' of type 'ref_obj'
        Object 'a' of type 'ref_obj'
      Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'out4' of type 'ref_obj'
      Object '' of type 'operation'
        Object 'out3' of type 'ref_obj'
        Object '' of type 'constant'
  Object 'my_struct_packed_t' of type 'struct_typespec'
    Object 'a' of type 'typespec_member'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/UnsizedConst/top.sv:3.1-13.16> str='\top'
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:4.23-4.27> str='\out1' output logic port=1 dimensions=[3:0]
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:4.17-4.22> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:5.17-5.21> str='\out2' output logic port=2 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:6.31-6.35> str='\out3' output logic basic_prep range=[3:0] dimensions=[3:0]
        ATTR \wiretype:
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> str='\my_struct_packed_t' bits='01011100011011010111100101011111011100110111010001110010011101010110001101110100010111110111000001100001011000110110101101100101011001000101111101110100'(152) basic_prep range=[151:0] int=1701076852 in_param
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:7.17-7.21> str='\out4' output logic port=4 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:9.10-9.21>
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:9.10-9.14> str='\out1' in_lvalue
        AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) range=[3:0] int=15
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:10.10-10.36>
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:10.10-10.14> str='\out2' in_lvalue
        AST_EQ <tests/simple_tests/UnsizedConst/top.sv:10.20-10.35>
          AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:10.20-10.24> str='\out1'
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) range=[3:0] int=15
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:11.10-11.21>
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:11.15-11.16> str='\out3' basic_prep in_lvalue
          AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> in_lvalue
            AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed range=[31:0] int=3 in_lvalue
            AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_lvalue
        AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) range=[3:0] int=15
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:12.10-12.31>
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:12.10-12.14> str='\out4' in_lvalue
        AST_EQ <tests/simple_tests/UnsizedConst/top.sv:12.20-12.30>
          AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:12.20-12.24> str='\out3'
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) range=[3:0] int=15
      AST_TYPEDEF <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> str='\my_struct_packed_t'
        AST_STRUCT <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/UnsizedConst/top.sv:1.36-1.37> str='a' logic basic_prep range=[3:0]
      AST_TYPEDEF <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> str='\builtin::my_struct_packed_t' basic_prep
        AST_STRUCT <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/UnsizedConst/top.sv:1.36-1.37> str='a' logic basic_prep range=[3:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top(out1, out2, out3, out4);
      output [3:0] out1;
      output [0:0] out2;
      (* wiretype = "\my_struct_packed_t" *)
      output [3:0] out3;
      output [0:0] out4;
      assign out1 = 4'b 1111;
      assign out2 = (out1)==(4'b 1111);
      assign out3[3:0] = 4'b 1111;
      assign out4 = (out3)==(4'b 1111);
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/UnsizedConst/top.sv:3.1-13.16> str='\top' basic_prep
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:4.23-4.27> str='\out1' output logic basic_prep port=1 range=[3:0] dimensions=[3:0]
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:4.17-4.22> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:5.17-5.21> str='\out2' output logic basic_prep port=2 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:6.31-6.35> str='\out3' output logic basic_prep range=[3:0] dimensions=[3:0]
        ATTR \wiretype:
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> str='\my_struct_packed_t' bits='01011100011011010111100101011111011100110111010001110010011101010110001101110100010111110111000001100001011000110110101101100101011001000101111101110100'(152) basic_prep range=[151:0] int=1701076852 in_param
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/UnsizedConst/top.sv:7.17-7.21> str='\out4' output logic basic_prep port=4 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:9.10-9.21> basic_prep
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:9.10-9.14> str='\out1' basic_prep in_lvalue
        AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) basic_prep range=[3:0] int=15
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:10.10-10.36> basic_prep
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:10.10-10.14> str='\out2' basic_prep in_lvalue
        AST_EQ <tests/simple_tests/UnsizedConst/top.sv:10.20-10.35> basic_prep
          AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:10.20-10.24> str='\out1' basic_prep
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) basic_prep range=[3:0] int=15
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:11.10-11.21> basic_prep
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:11.15-11.16> str='\out3' basic_prep in_lvalue
          AST_RANGE <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> basic_prep range=[3:0] in_lvalue
            AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_lvalue
            AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_lvalue
        AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) basic_prep range=[3:0] int=15
      AST_ASSIGN <tests/simple_tests/UnsizedConst/top.sv:12.10-12.31> basic_prep
        AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:12.10-12.14> str='\out4' basic_prep in_lvalue
        AST_EQ <tests/simple_tests/UnsizedConst/top.sv:12.20-12.30> basic_prep
          AST_IDENTIFIER <tests/simple_tests/UnsizedConst/top.sv:12.20-12.24> str='\out3' basic_prep
          AST_CONSTANT <tests/simple_tests/UnsizedConst/top.sv:0.0-0.0> bits='1111'(4) basic_prep range=[3:0] int=15
      AST_TYPEDEF <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> str='\my_struct_packed_t' basic_prep
        AST_STRUCT <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/UnsizedConst/top.sv:1.36-1.37> str='a' logic basic_prep range=[3:0]
      AST_TYPEDEF <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> str='\builtin::my_struct_packed_t' basic_prep
        AST_STRUCT <tests/simple_tests/UnsizedConst/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/UnsizedConst/top.sv:1.36-1.37> str='a' logic basic_prep range=[3:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top(out1, out2, out3, out4);
      output [3:0] out1;
      output [0:0] out2;
      (* wiretype = "\my_struct_packed_t" *)
      output [3:0] out3;
      output [0:0] out4;
      assign out1 = 4'b 1111;
      assign out2 = (out1)==(4'b 1111);
      assign out3[3:0] = 4'b 1111;
      assign out4 = (out3)==(4'b 1111);
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
    endmodule
--- END OF AST DUMP ---

2. Executing Verilog backend.

2.1. Executing BMUXMAP pass.

2.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.45+3 (git sha1 17ee367c7, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\top'.

(* cells_not_processed =  1  *)
(* src = "tests/simple_tests/UnsizedConst/top.sv:3.1-13.16" *)
module top(out1, out2, out4, out3);
  (* src = "tests/simple_tests/UnsizedConst/top.sv:10.20-10.35" *)
  wire _0_;
  (* src = "tests/simple_tests/UnsizedConst/top.sv:12.20-12.30" *)
  wire _1_;
  (* src = "tests/simple_tests/UnsizedConst/top.sv:4.23-4.27" *)
  output [3:0] out1;
  wire [3:0] out1;
  (* src = "tests/simple_tests/UnsizedConst/top.sv:5.17-5.21" *)
  output out2;
  wire out2;
  (* src = "tests/simple_tests/UnsizedConst/top.sv:6.31-6.35" *)
  (* wiretype = "\\my_struct_packed_t" *)
  output [3:0] out3;
  wire [3:0] out3;
  (* src = "tests/simple_tests/UnsizedConst/top.sv:7.17-7.21" *)
  output out4;
  wire out4;
  assign _0_ = out1 == (* src = "tests/simple_tests/UnsizedConst/top.sv:10.20-10.35" *) 4'hf;
  assign _1_ = out3 == (* src = "tests/simple_tests/UnsizedConst/top.sv:12.20-12.30" *) 4'hf;
  assign out1 = 4'hf;
  assign out2 = _0_;
  assign out3 = 4'hf;
  assign out4 = _1_;
endmodule

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
Dumping module `\top'.

Yosys 0.45+3 (git sha1 17ee367c7, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
