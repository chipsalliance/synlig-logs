1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/MultirangeMemory/top.sv:1:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/MultirangeMemory/top.sv:1:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 0.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'arr' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'begin'
        Object '' of type 'immediate_assert'
          Object '' of type 'operation'
            Object 'arr' of type 'var_select'
              Object '' of type 'constant'
              Object '' of type 'constant'
            Object '' of type 'constant'
        Object '' of type 'immediate_assert'
          Object '' of type 'operation'
            Object 'arr' of type 'var_select'
              Object '' of type 'constant'
              Object '' of type 'constant'
            Object '' of type 'constant'
        Object '' of type 'immediate_assert'
          Object '' of type 'operation'
            Object 'arr' of type 'var_select'
              Object '' of type 'constant'
              Object '' of type 'constant'
            Object '' of type 'constant'
        Object '' of type 'immediate_assert'
          Object '' of type 'operation'
            Object 'arr' of type 'var_select'
              Object '' of type 'constant'
              Object '' of type 'constant'
            Object '' of type 'constant'
  Object 'work@top' of type 'module_inst'
    Object '' of type 'cont_assign'
      Object 'arr' of type 'var_select'
        Object '' of type 'constant'
        Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'arr' of type 'var_select'
        Object '' of type 'constant'
        Object 'arr' of type 'part_select'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'arr' of type 'var_select'
        Object '' of type 'constant'
        Object '' of type 'constant'
      Object '' of type 'constant'
    Object 'arr' of type 'array_var'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'operation'
          Object '' of type 'constant'
          Object '' of type 'constant'
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/MultirangeMemory/top.sv:1.1-14.10> str='\top'
      AST_MEMORY <tests/simple_tests/MultirangeMemory/top.sv:2.14-2.17> str='\arr' logic
        AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:2.8-2.13>
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed range=[31:0] int=3
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
        AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:2.19-2.20>
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
          AST_SUB <tests/simple_tests/MultirangeMemory/top.sv:2.19-2.20>
            AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2
            AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
      AST_ASSIGN <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.25>
        AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.18> str='\arr' in_lvalue
          AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> in_lvalue
            AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.18> in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_lvalue
            AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.18> in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_lvalue
        AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
      AST_ASSIGN <tests/simple_tests/MultirangeMemory/top.sv:5.9-5.28>
        AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:5.9-5.20> str='\arr' in_lvalue
          AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> in_lvalue
            AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:5.9-5.20> in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_lvalue
            AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:5.16-5.19> in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2 in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_lvalue
        AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
      AST_ASSIGN <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.25>
        AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.18> str='\arr' in_lvalue
          AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> in_lvalue
            AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.18> in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_lvalue
            AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.18> in_lvalue
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed range=[31:0] int=3 in_lvalue
        AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
      AST_ALWAYS <tests/simple_tests/MultirangeMemory/top.sv:8.2-13.5>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/MultirangeMemory/top.sv:8.14-13.5>
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:9.3-9.29>
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.27>
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.19> str='\arr'
                AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0>
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:10.3-10.29>
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.27>
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.19> str='\arr'
                AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0>
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:11.3-11.29>
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.27>
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.19> str='\arr'
                AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0>
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='1'(1) range=[0:0] int=1
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:12.3-12.29>
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.27>
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.19> str='\arr'
                AST_MULTIRANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0>
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                  AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.19>
                    AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed range=[31:0] int=3
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) range=[0:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top();
      memory [3:0] arr [0:(2)-(1)];
      assign arr[1][0] = 1'b 0;
      assign arr[1][2:1] = 2'b 10;
      assign arr[1][3] = 1'b 0;
      (* always_comb = 1 *)
      always @*
        begin
          /** AST_ASSERT **/
          /** AST_ASSERT **/
          /** AST_ASSERT **/
          /** AST_ASSERT **/
        end
    endmodule
--- END OF AST DUMP ---
Warning: Replacing memory \arr with list of registers. See tests/simple_tests/MultirangeMemory/top.sv:4
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/MultirangeMemory/top.sv:1.1-14.10> str='\top' basic_prep
      AST_NONE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep
      AST_NONE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep
      AST_NONE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep
      AST_ALWAYS <tests/simple_tests/MultirangeMemory/top.sv:8.2-13.5> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/MultirangeMemory/top.sv:8.14-13.5> basic_prep
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:9.3-9.29> basic_prep
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.27> basic_prep
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.19> str='\arr[1]' basic_prep int=2
                AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:9.10-9.19> basic_prep range=[0:0]
                  AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:10.3-10.29> basic_prep
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.27> basic_prep
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.19> str='\arr[1]' basic_prep int=2
                AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:10.10-10.19> basic_prep range=[1:1]
                  AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:11.3-11.29> basic_prep
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.27> basic_prep
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.19> str='\arr[1]' basic_prep int=2
                AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:11.10-11.19> basic_prep range=[2:2]
                  AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
          AST_ASSERT <tests/simple_tests/MultirangeMemory/top.sv:12.3-12.29> basic_prep
            AST_EQ <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.27> basic_prep
              AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.19> str='\arr[1]' basic_prep int=2
                AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:12.10-12.19> basic_prep range=[3:3]
                  AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3
              AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
      AST_WIRE <tests/simple_tests/MultirangeMemory/top.sv:2.14-2.17> str='\arr[0]' reg basic_prep range=[3:0] dimensions=[3:0]
        AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/MultirangeMemory/top.sv:2.14-2.17> str='\arr[1]' reg basic_prep range=[3:0] dimensions=[3:0]
        AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep
        AST_BLOCK <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> basic_prep
          AST_ASSIGN_EQ <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.25> basic_prep
            AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.18> str='\arr[1]' basic_prep int=2 in_lvalue
              AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:4.9-4.18> basic_prep range=[0:0] in_lvalue
                AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_lvalue
            AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
          AST_ASSIGN_EQ <tests/simple_tests/MultirangeMemory/top.sv:5.9-5.28> basic_prep
            AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:5.9-5.20> str='\arr[1]' basic_prep int=2 in_lvalue
              AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:5.16-5.19> basic_prep range=[2:1] in_lvalue
                AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_lvalue
                AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_lvalue
            AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
          AST_ASSIGN_EQ <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.25> basic_prep
            AST_IDENTIFIER <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.18> str='\arr[1]' basic_prep int=2 in_lvalue
              AST_RANGE <tests/simple_tests/MultirangeMemory/top.sv:6.9-6.18> basic_prep range=[3:3] in_lvalue
                AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_lvalue
            AST_CONSTANT <tests/simple_tests/MultirangeMemory/top.sv:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top();
      reg [3:0] \arr[0] ;
      reg [3:0] \arr[1] ;
      /** AST_NONE **/
      /** AST_NONE **/
      /** AST_NONE **/
      (* always_comb = 1 *)
      always @*
        begin
          /** AST_ASSERT **/
          /** AST_ASSERT **/
          /** AST_ASSERT **/
          /** AST_ASSERT **/
        end
      always @*
        begin
          \arr[1] [0:0] = 1'b 0;
          \arr[1] [2:1] = 2'b 10;
          \arr[1] [3:3] = 1'b 0;
        end
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top

2.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 7 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$tests/simple_tests/MultirangeMemory/top.sv:0$10'.
Creating decoders for process `\top.$proc$tests/simple_tests/MultirangeMemory/top.sv:8$1'.

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\arr[1]' from process `\top.$proc$tests/simple_tests/MultirangeMemory/top.sv:0$10'.

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$tests/simple_tests/MultirangeMemory/top.sv:0$10'.
Removing empty process `top.$proc$tests/simple_tests/MultirangeMemory/top.sv:8$1'.
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~7 debug messages>

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== top ===

   Number of wires:                  1
   Number of wire bits:              4
   Number of public wires:           1
   Number of public wire bits:       4
   Number of ports:                  0
   Number of port bits:              0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $check                          4

2.13. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3. Executing ASYNC2SYNC pass.

4. Executing SAT pass (solving SAT problems in the circuit).

Setting up time step 1:
Final constraint equation: { } = { }
Imported 12 cells to SAT database.
No constraints for initial state found.


Setting up time step 1:
Final constraint equation: { } = { }
Imported 12 cells to SAT database.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.

** Trying induction with length 1 **

Setting up time step 2:
Final constraint equation: { } = { }
Imported 12 cells to SAT database.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import show expression: $auto$rtlil.cc:2515:And$30
Import show expression: $auto$rtlil.cc:2485:Not$28
Import show expression: $auto$rtlil.cc:2515:And$25
Import show expression: $auto$rtlil.cc:2485:Not$23
Import show expression: $auto$rtlil.cc:2515:And$20
Import show expression: $auto$rtlil.cc:2485:Not$18
Import show expression: $auto$rtlil.cc:2515:And$15
Import show expression: $auto$rtlil.cc:2485:Not$13
Import show expression: \arr[1]

[base case 1] Solving problem with 58 variables and 140 clauses..
Base case for induction length 1 proven.

Setting up time step 2:
Final constraint equation: { } = { }
Imported 12 cells to SAT database.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import proof for assert: 1'1 when 1'1.
Import show expression: $auto$rtlil.cc:2515:And$30
Import show expression: $auto$rtlil.cc:2485:Not$28
Import show expression: $auto$rtlil.cc:2515:And$25
Import show expression: $auto$rtlil.cc:2485:Not$23
Import show expression: $auto$rtlil.cc:2515:And$20
Import show expression: $auto$rtlil.cc:2485:Not$18
Import show expression: $auto$rtlil.cc:2515:And$15
Import show expression: $auto$rtlil.cc:2485:Not$13
Import show expression: \arr[1]

[induction step 1] Solving problem with 58 variables and 141 clauses..
Induction step proven: SUCCESS!

                  /$$$$$$      /$$$$$$$$     /$$$$$$$    
                 /$$__  $$    | $$_____/    | $$__  $$   
                | $$  \ $$    | $$          | $$  \ $$   
                | $$  | $$    | $$$$$       | $$  | $$   
                | $$  | $$    | $$__/       | $$  | $$   
                | $$/$$ $$    | $$          | $$  | $$   
                |  $$$$$$/ /$$| $$$$$$$$ /$$| $$$$$$$//$$
                 \____ $$$|__/|________/|__/|_______/|__/
                       \__/                              

Warnings: 1 unique messages, 1 total
Yosys 0.44+9 (git sha1 4b9f45273, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
