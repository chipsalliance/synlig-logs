1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/DotRange/top.sv:4:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/DotRange/top.sv:4:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 1.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'foo' of type 'logic_net'
    Object 'bar' of type 'logic_net'
  Object 'work@top' of type 'module_inst'
    Object 'foo' of type 'port'
      Object 'foo_struct_t' of type 'struct_typespec'
        Object 'k' of type 'typespec_member'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
    Object 'bar' of type 'port'
      Object 'bar_struct_t' of type 'struct_typespec'
        Object 'l' of type 'typespec_member'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
    Object 'foo' of type 'struct_net'
      Object 'foo_struct_t' of type 'struct_typespec'
        Object 'k' of type 'typespec_member'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
    Object 'bar' of type 'struct_net'
      Object 'bar_struct_t' of type 'struct_typespec'
        Object 'l' of type 'typespec_member'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'bar.l[2][1]' of type 'hier_path'
        Object 'bar' of type 'ref_obj'
        Object 'l' of type 'var_select'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object 'foo.k[2]' of type 'hier_path'
        Object 'foo' of type 'ref_obj'
        Object 'k' of type 'bit_select'
          Object '' of type 'constant'
  Object 'bar_struct_t' of type 'struct_typespec'
    Object 'l' of type 'typespec_member'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
  Object 'foo_struct_t' of type 'struct_typespec'
    Object 'k' of type 'typespec_member'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/DotRange/top.sv:4.1-9.16> str='\top'
      AST_WIRE <tests/simple_tests/DotRange/top.sv:5.25-5.28> str='\foo' input logic basic_prep range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        ATTR \wiretype:
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> str='\foo_struct_t' bits='01011100011001100110111101101111010111110111001101110100011100100111010101100011011101000101111101110100'(104) basic_prep range=[103:0] int=1668570996 in_param
        AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/DotRange/top.sv:6.25-6.28> str='\bar' output logic basic_prep range=[20:0] multirange=[ 0 21 ] multirange_swapped=[ 0 ]
        ATTR \wiretype:
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> str='\bar_struct_t' bits='01011100011000100110000101110010010111110111001101110100011100100111010101100011011101000101111101110100'(104) basic_prep range=[103:0] int=1668570996 in_param
        AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> basic_prep range=[20:0] in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000010100'(32) signed basic_prep range=[31:0] int=20 in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/DotRange/top.sv:8.10-8.32>
        AST_IDENTIFIER <tests/simple_tests/DotRange/top.sv:8.14-8.15> str='\bar' basic_prep in_lvalue
          AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
            AST_ADD <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
              AST_ADD <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
                AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_lvalue
                AST_MUL <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
                  AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2 in_lvalue
                  AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000111'(32) signed range=[31:0] int=7 in_lvalue
              AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_lvalue
            AST_ADD <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
              AST_ADD <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
                AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_lvalue
                AST_MUL <tests/simple_tests/DotRange/top.sv:0.0-0.0> in_lvalue
                  AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2 in_lvalue
                  AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000111'(32) signed range=[31:0] int=7 in_lvalue
              AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_lvalue
        AST_IDENTIFIER <tests/simple_tests/DotRange/top.sv:8.24-8.27> str='\foo' basic_prep
          AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0>
            AST_ADD <tests/simple_tests/DotRange/top.sv:0.0-0.0>
              AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
              AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2
            AST_ADD <tests/simple_tests/DotRange/top.sv:0.0-0.0>
              AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
              AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:2.9-2.44> str='\bar_struct_t'
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:2.9-2.44> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:2.41-2.42> str='l' logic basic_prep range=[20:0] multirange=[ 0 7 0 3 ] multirange_swapped=[ 0 0 ]
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:1.9-1.39> str='\foo_struct_t'
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:1.36-1.37> str='k' logic basic_prep range=[2:0]
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:2.9-2.44> str='\builtin::bar_struct_t' basic_prep
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:2.9-2.44> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:2.41-2.42> str='l' logic basic_prep range=[20:0] multirange=[ 0 7 0 3 ] multirange_swapped=[ 0 0 ]
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:1.9-1.39> str='\builtin::foo_struct_t' basic_prep
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:1.36-1.37> str='k' logic basic_prep range=[2:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top(foo, bar);
      (* wiretype = "\foo_struct_t" *)
      input [2:0] foo;
      (* wiretype = "\bar_struct_t" *)
      output [20:0] bar;
      assign bar[((0)+((2)*(7)))+(1):((0)+((2)*(7)))+(1)] = foo[(0)+(2):(0)+(2)];
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/DotRange/top.sv:4.1-9.16> str='\top' basic_prep
      AST_WIRE <tests/simple_tests/DotRange/top.sv:5.25-5.28> str='\foo' input logic basic_prep range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        ATTR \wiretype:
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> str='\foo_struct_t' bits='01011100011001100110111101101111010111110111001101110100011100100111010101100011011101000101111101110100'(104) basic_prep range=[103:0] int=1668570996 in_param
        AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/DotRange/top.sv:6.25-6.28> str='\bar' output logic basic_prep range=[20:0] multirange=[ 0 21 ] multirange_swapped=[ 0 ]
        ATTR \wiretype:
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> str='\bar_struct_t' bits='01011100011000100110000101110010010111110111001101110100011100100111010101100011011101000101111101110100'(104) basic_prep range=[103:0] int=1668570996 in_param
        AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> basic_prep range=[20:0] in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000010100'(32) signed basic_prep range=[31:0] int=20 in_param
          AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/DotRange/top.sv:8.10-8.32> basic_prep
        AST_IDENTIFIER <tests/simple_tests/DotRange/top.sv:8.14-8.15> str='\bar' basic_prep in_lvalue
          AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> basic_prep range=[15:15] in_lvalue
            AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000001111'(32) signed basic_prep range=[31:0] int=15 in_lvalue
            AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000001111'(32) signed basic_prep range=[31:0] int=15 in_lvalue
        AST_IDENTIFIER <tests/simple_tests/DotRange/top.sv:8.24-8.27> str='\foo' basic_prep
          AST_RANGE <tests/simple_tests/DotRange/top.sv:0.0-0.0> basic_prep range=[2:2]
            AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
            AST_CONSTANT <tests/simple_tests/DotRange/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:2.9-2.44> str='\bar_struct_t' basic_prep
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:2.9-2.44> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:2.41-2.42> str='l' logic basic_prep range=[20:0] multirange=[ 0 7 0 3 ] multirange_swapped=[ 0 0 ]
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:1.9-1.39> str='\foo_struct_t' basic_prep
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:1.36-1.37> str='k' logic basic_prep range=[2:0]
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:2.9-2.44> str='\builtin::bar_struct_t' basic_prep
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:2.9-2.44> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:2.41-2.42> str='l' logic basic_prep range=[20:0] multirange=[ 0 7 0 3 ] multirange_swapped=[ 0 0 ]
      AST_TYPEDEF <tests/simple_tests/DotRange/top.sv:1.9-1.39> str='\builtin::foo_struct_t' basic_prep
        AST_STRUCT <tests/simple_tests/DotRange/top.sv:1.9-1.39> basic_prep
          AST_STRUCT_ITEM <tests/simple_tests/DotRange/top.sv:1.36-1.37> str='k' logic basic_prep range=[2:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top(foo, bar);
      (* wiretype = "\foo_struct_t" *)
      input [2:0] foo;
      (* wiretype = "\bar_struct_t" *)
      output [20:0] bar;
      assign bar[15:15] = foo[2:2];
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
      /** AST_TYPEDEF **/
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top

2.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.6. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\bar [20] is used but has no driver.
Warning: Wire top.\bar [19] is used but has no driver.
Warning: Wire top.\bar [18] is used but has no driver.
Warning: Wire top.\bar [17] is used but has no driver.
Warning: Wire top.\bar [16] is used but has no driver.
Warning: Wire top.\bar [14] is used but has no driver.
Warning: Wire top.\bar [13] is used but has no driver.
Warning: Wire top.\bar [12] is used but has no driver.
Warning: Wire top.\bar [11] is used but has no driver.
Warning: Wire top.\bar [10] is used but has no driver.
Warning: Wire top.\bar [9] is used but has no driver.
Warning: Wire top.\bar [8] is used but has no driver.
Warning: Wire top.\bar [7] is used but has no driver.
Warning: Wire top.\bar [6] is used but has no driver.
Warning: Wire top.\bar [5] is used but has no driver.
Warning: Wire top.\bar [4] is used but has no driver.
Warning: Wire top.\bar [3] is used but has no driver.
Warning: Wire top.\bar [2] is used but has no driver.
Warning: Wire top.\bar [1] is used but has no driver.
Warning: Wire top.\bar [0] is used but has no driver.
Found and reported 20 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== top ===

   Number of wires:                  2
   Number of wire bits:             24
   Number of public wires:           2
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

2.13. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\bar [20] is used but has no driver.
Warning: Wire top.\bar [19] is used but has no driver.
Warning: Wire top.\bar [18] is used but has no driver.
Warning: Wire top.\bar [17] is used but has no driver.
Warning: Wire top.\bar [16] is used but has no driver.
Warning: Wire top.\bar [14] is used but has no driver.
Warning: Wire top.\bar [13] is used but has no driver.
Warning: Wire top.\bar [12] is used but has no driver.
Warning: Wire top.\bar [11] is used but has no driver.
Warning: Wire top.\bar [10] is used but has no driver.
Warning: Wire top.\bar [9] is used but has no driver.
Warning: Wire top.\bar [8] is used but has no driver.
Warning: Wire top.\bar [7] is used but has no driver.
Warning: Wire top.\bar [6] is used but has no driver.
Warning: Wire top.\bar [5] is used but has no driver.
Warning: Wire top.\bar [4] is used but has no driver.
Warning: Wire top.\bar [3] is used but has no driver.
Warning: Wire top.\bar [2] is used but has no driver.
Warning: Wire top.\bar [1] is used but has no driver.
Warning: Wire top.\bar [0] is used but has no driver.
Found and reported 20 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.34+23 (git sha1 c8adb5a2e, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\top'.

(* top =  1  *)
(* src = "tests/simple_tests/DotRange/top.sv:4.1-9.16" *)
module top(bar, foo);
  (* src = "tests/simple_tests/DotRange/top.sv:6.25-6.28" *)
  (* wiretype = "\\bar_struct_t" *)
  output [20:0] bar;
  wire [20:0] bar;
  (* src = "tests/simple_tests/DotRange/top.sv:5.25-5.28" *)
  (* wiretype = "\\foo_struct_t" *)
  input [2:0] foo;
  wire [2:0] foo;
  assign bar[15] = foo[2];
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\top'.

Warnings: 20 unique messages, 40 total
Yosys 0.34+23 (git sha1 c8adb5a2e, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
