1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] third_party/surelog/tests/OneFF/dut.v:2:1: Compile module "work@dut".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] third_party/surelog/tests/OneFF/dut.v:2:1: Top level module "work@dut".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 0.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@dut' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'd' of type 'logic_net'
    Object 'rstn' of type 'logic_net'
    Object 'clk' of type 'logic_net'
    Object 'q' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'event_control'
        Object '' of type 'operation'
          Object '' of type 'operation'
            Object 'clk' of type 'ref_obj'
          Object '' of type 'operation'
            Object 'rstn' of type 'ref_obj'
        Object '' of type 'begin'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'rstn' of type 'ref_obj'
            Object '' of type 'assignment'
              Object 'q' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'assignment'
              Object 'q' of type 'ref_obj'
              Object 'd' of type 'ref_obj'
  Object 'work@dut' of type 'module_inst'
    Object 'd' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'rstn' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'clk' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'q' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'd' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'rstn' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'clk' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'q' of type 'logic_net'
      Object '' of type 'logic_typespec'
Generating RTLIL representation for module `\dut'.
Dumping AST before simplification:
    AST_MODULE <third_party/surelog/tests/OneFF/dut.v:2.1-14.10> str='\dut'
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:2.20-2.21> str='\d' input logic port=1 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:3.21-3.25> str='\rstn' input logic port=2 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:4.21-4.24> str='\clk' input logic port=3 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:5.26-5.27> str='\q' output reg port=4 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <third_party/surelog/tests/OneFF/dut.v:7.3-13.10>
        AST_POSEDGE <third_party/surelog/tests/OneFF/dut.v:7.13-7.24>
          AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:7.21-7.24> str='\clk'
        AST_NEGEDGE <third_party/surelog/tests/OneFF/dut.v:7.28-7.40>
          AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:7.36-7.40> str='\rstn'
        AST_BLOCK <third_party/surelog/tests/OneFF/dut.v:7.10-7.41>
          AST_BLOCK <third_party/surelog/tests/OneFF/dut.v:8.7-13.10>
            AST_CASE <third_party/surelog/tests/OneFF/dut.v:9.8-12.18>
              AST_REDUCE_BOOL <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0>
                AST_LOGIC_NOT <third_party/surelog/tests/OneFF/dut.v:9.12-9.17>
                  AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:9.13-9.17> str='\rstn'
              AST_COND <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0>
                AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_BLOCK <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0>
                  AST_ASSIGN_LE <third_party/surelog/tests/OneFF/dut.v:10.11-10.17>
                    AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:10.11-10.12> str='\q' in_lvalue
                    AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
              AST_COND <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0>
                AST_DEFAULT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0>
                AST_BLOCK <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0>
                  AST_ASSIGN_LE <third_party/surelog/tests/OneFF/dut.v:12.11-12.17>
                    AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:12.11-12.12> str='\q' in_lvalue
                    AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:12.16-12.17> str='\d'
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module dut(d, rstn, clk, q);
      input [0:0] d;
      input [0:0] rstn;
      input [0:0] clk;
      output reg [0:0] q;
      always @(posedge clk, negedge rstn)
        case (|(!(rstn)))
          1'b 1:
            q <= 0;
          default:
            q <= d;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <third_party/surelog/tests/OneFF/dut.v:2.1-14.10> str='\dut' basic_prep
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:2.20-2.21> str='\d' input logic basic_prep port=1 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:3.21-3.25> str='\rstn' input logic basic_prep port=2 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:4.21-4.24> str='\clk' input logic basic_prep port=3 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <third_party/surelog/tests/OneFF/dut.v:5.26-5.27> str='\q' output reg basic_prep port=4 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <third_party/surelog/tests/OneFF/dut.v:7.3-13.10> basic_prep
        AST_POSEDGE <third_party/surelog/tests/OneFF/dut.v:7.13-7.24> basic_prep
          AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:7.21-7.24> str='\clk' basic_prep
        AST_NEGEDGE <third_party/surelog/tests/OneFF/dut.v:7.28-7.40> basic_prep
          AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:7.36-7.40> str='\rstn' basic_prep
        AST_BLOCK <third_party/surelog/tests/OneFF/dut.v:7.10-7.41> basic_prep
          AST_BLOCK <third_party/surelog/tests/OneFF/dut.v:8.7-13.10> basic_prep
            AST_CASE <third_party/surelog/tests/OneFF/dut.v:9.8-12.18> basic_prep
              AST_REDUCE_BOOL <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep
                AST_LOGIC_NOT <third_party/surelog/tests/OneFF/dut.v:9.12-9.17> basic_prep
                  AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:9.13-9.17> str='\rstn' basic_prep
              AST_COND <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep
                AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                AST_BLOCK <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep
                  AST_ASSIGN_LE <third_party/surelog/tests/OneFF/dut.v:10.11-10.17> basic_prep
                    AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:10.11-10.12> str='\q' basic_prep in_lvalue
                    AST_CONSTANT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
              AST_COND <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep
                AST_DEFAULT <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep
                AST_BLOCK <tests/../third_party/surelog/tests/OneFF/dut.v:0.0-0.0> basic_prep
                  AST_ASSIGN_LE <third_party/surelog/tests/OneFF/dut.v:12.11-12.17> basic_prep
                    AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:12.11-12.12> str='\q' basic_prep in_lvalue
                    AST_IDENTIFIER <third_party/surelog/tests/OneFF/dut.v:12.16-12.17> str='\d' basic_prep
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module dut(d, rstn, clk, q);
      input [0:0] d;
      input [0:0] rstn;
      input [0:0] clk;
      output reg [0:0] q;
      always @(posedge clk, negedge rstn)
        case (|(!(rstn)))
          1'b 1:
            q <= 0;
          default:
            q <= d;
        endcase
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \dut

2.1.2. Analyzing design hierarchy..
Top module:  \dut
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$third_party/surelog/tests/OneFF/dut.v:7$1 in module dut.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rstn in `\dut.$proc$third_party/surelog/tests/OneFF/dut.v:7$1'.

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dut.$proc$third_party/surelog/tests/OneFF/dut.v:7$1'.
     1/1: $0\q[0:0]

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dut.\q' using process `\dut.$proc$third_party/surelog/tests/OneFF/dut.v:7$1'.
  created $adff cell `$procdff$3' with positive edge clock and negative level reset.

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `dut.$proc$third_party/surelog/tests/OneFF/dut.v:7$1'.
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dut.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== dut ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $adff                           1

2.13. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Found and reported 0 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.35+58 (git sha1 8bd681acf, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\dut'.

(* top =  1  *)
(* src = "third_party/surelog/tests/OneFF/dut.v:2.1-14.10" *)
module dut(d, rstn, clk, q);
  (* src = "third_party/surelog/tests/OneFF/dut.v:4.21-4.24" *)
  input clk;
  wire clk;
  (* src = "third_party/surelog/tests/OneFF/dut.v:2.20-2.21" *)
  input d;
  wire d;
  (* src = "third_party/surelog/tests/OneFF/dut.v:5.26-5.27" *)
  output q;
  reg q;
  (* src = "third_party/surelog/tests/OneFF/dut.v:3.21-3.25" *)
  input rstn;
  wire rstn;
  (* src = "third_party/surelog/tests/OneFF/dut.v:7.3-13.10" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) q <= 1'h0;
    else q <= d;
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\dut'.

Yosys 0.35+58 (git sha1 8bd681acf, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
