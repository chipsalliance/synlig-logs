1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:1:1: Compile module "work@test_module".
[INF:CP0303] tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[NTE:CP0309] tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:5:10: Implicit port type (wire) for "a".
[NTE:CP0309] tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10:19: Implicit port type (wire) for "a",
there are 1 more instances of this message.
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 2.
[NTE:EL0510] Nb instances: 3.
[NTE:EL0511] Nb leaf instances: 2.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 7
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'test_parameter' of type 'type_parameter'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'a_in' of type 'logic_net'
    Object 'a' of type 'logic_net'
  Object '' of type 'module_inst'
    Object 'a' of type 'logic_net'
    Object 'b' of type 'logic_net'
    Object 'val' of type 'logic_net'
  Object 'work@top' of type 'module_inst'
    Object 'inst1' of type 'module_inst'
      Object 'test_parameter' of type 'type_parameter'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'a_in' of type 'logic_var'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'a' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'a_in' of type 'port'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'a' of type 'port'
        Object '' of type 'logic_typespec'
      Object '' of type 'cont_assign'
        Object 'a' of type 'ref_obj'
        Object 'a_in' of type 'bit_select'
          Object '' of type 'constant'
      Object 'val' of type 'ref_obj'
      Object 'a' of type 'ref_obj'
    Object 'inst2' of type 'module_inst'
      Object 'test_parameter' of type 'type_parameter'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'a_in' of type 'logic_var'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'a' of type 'logic_net'
        Object '' of type 'logic_typespec'
      Object 'a_in' of type 'port'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'a' of type 'port'
        Object '' of type 'logic_typespec'
      Object '' of type 'cont_assign'
        Object 'a' of type 'ref_obj'
        Object 'a_in' of type 'bit_select'
          Object '' of type 'constant'
      Object 'val' of type 'ref_obj'
      Object 'b' of type 'ref_obj'
    Object 'a' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'b' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'a' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'b' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'val' of type 'logic_var'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
Warning: Removing unelaborated module: \test_module from the design.
Generating RTLIL representation for module `$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:1.1-8.10> str='$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:4.24-4.28> str='\a_in' input logic port=1 dimensions=[1:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.38-12.43> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:5.10-5.11> str='\a' output logic port=2 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.21>
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.11> str='\a' in_lvalue
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20> str='\a_in'
          AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20>
            AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module \$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module (a_in, a);
      input [1:0] a_in;
      output [0:0] a;
      assign a = a_in[0];
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:1.1-8.10> str='$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module' basic_prep
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:4.24-4.28> str='\a_in' input logic basic_prep port=1 range=[1:0] dimensions=[1:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.38-12.43> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:5.10-5.11> str='\a' output logic basic_prep port=2 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.21> basic_prep
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.11> str='\a' basic_prep in_lvalue
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20> str='\a_in' basic_prep int=1
          AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20> basic_prep range=[0:0]
            AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module \$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module (a_in, a);
      input [1:0] a_in;
      output [0:0] a;
      assign a = a_in[0:0];
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10.1-14.10> str='\top'
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10.19-10.20> str='\a' output logic port=5 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10.29-10.30> str='\b' output logic port=6 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:11.15-11.22> str='\val' logic
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:11.9-11.14> in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
      AST_CELL <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.3-12.71> str='\inst1'
        AST_CELLTYPE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> str='$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.3-12.71> str='\a_in'
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.58-12.61> str='\val'
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.3-12.71> str='\a'
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.67-12.68> str='\a'
      AST_CELL <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.3-13.40> str='\inst2'
        AST_CELLTYPE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> str='$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.3-13.40> str='\a_in'
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.27-13.30> str='\val'
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.3-13.40> str='\a'
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.36-13.37> str='\b'
      AST_INITIAL <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0>
        AST_BLOCK <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0>
          AST_ASSIGN_EQ <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0>
            AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> str='\val' in_lvalue
            AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='0101'(4) range=[3:0] int=5
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top(a, b);
      output [0:0] a;
      output [0:0] b;
      wire [3:0] val;
      /** AST_CELL **/
      /** AST_CELL **/
      initial
        val = 4'b 0101;
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10.1-14.10> str='\top' basic_prep
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10.19-10.20> str='\a' output logic basic_prep port=5 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:10.29-10.30> str='\b' output logic basic_prep port=6 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:11.15-11.22> str='\val' logic reg basic_prep range=[3:0] dimensions=[3:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:11.9-11.14> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_CELL <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.3-12.71> str='\inst1' basic_prep
        AST_CELLTYPE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> str='$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module' basic_prep
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.3-12.71> str='\a_in' basic_prep
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.58-12.61> str='\val' basic_prep
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.3-12.71> str='\a' basic_prep
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:12.67-12.68> str='\a' basic_prep
      AST_CELL <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.3-13.40> str='\inst2' basic_prep
        AST_CELLTYPE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> str='$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module' basic_prep
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.3-13.40> str='\a_in' basic_prep
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.27-13.30> str='\val' basic_prep
        AST_ARGUMENT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.3-13.40> str='\a' basic_prep
          AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:13.36-13.37> str='\b' basic_prep
      AST_INITIAL <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep
        AST_BLOCK <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep
          AST_ASSIGN_EQ <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep
            AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> str='\val' basic_prep in_lvalue
            AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='0101'(4) basic_prep range=[3:0] int=5
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top(a, b);
      output [0:0] a;
      output [0:0] b;
      reg [3:0] val;
      /** AST_CELL **/
      /** AST_CELL **/
      initial
        val = 4'b 0101;
    endmodule
--- END OF AST DUMP ---
Generating RTLIL representation for module `$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:1.1-8.10> str='$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:4.24-4.28> str='\a_in' input logic port=3 dimensions=[3:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:2.41-2.46> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:5.10-5.11> str='\a' output logic port=4 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.21>
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.11> str='\a' in_lvalue
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20> str='\a_in'
          AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20>
            AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module \$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module (a_in, a);
      input [3:0] a_in;
      output [0:0] a;
      assign a = a_in[0];
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:1.1-8.10> str='$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module' basic_prep
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:4.24-4.28> str='\a_in' input logic basic_prep port=3 range=[3:0] dimensions=[3:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:2.41-2.46> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:5.10-5.11> str='\a' output logic basic_prep port=4 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ASSIGN <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.21> basic_prep
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.10-7.11> str='\a' basic_prep in_lvalue
        AST_IDENTIFIER <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20> str='\a_in' basic_prep int=1
          AST_RANGE <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:7.19-7.20> basic_prep range=[0:0]
            AST_CONSTANT <tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module \$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module (a_in, a);
      input [3:0] a_in;
      output [0:0] a;
      assign a = a_in[0:0];
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module
Used module:     $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module

2.1.2. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module
Used module:     $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module
Removed 0 unused modules.
Warning: Resizing cell port top.inst1.a_in from 4 bits to 2 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0$1'.

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\val' from process `\top.$proc$tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0$1'.

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$tests/simple_tests/TypeParameterAsPortTypeWithLogicAnonymous/top.sv:0$1'.
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module top.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module top.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
Finding unused cells or wires in module \top..
Finding unused cells or wires in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module...
Checking module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module...
Checking module top...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
Optimizing module top.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'.
Finding identical cells in module `$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
  Optimizing cells in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'.
Finding identical cells in module `$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
Finding unused cells or wires in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
Finding unused cells or wires in module \top..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
Optimizing module top.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
Finding unused cells or wires in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
Finding unused cells or wires in module \top..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'.
Finding identical cells in module `$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
Finding unused cells or wires in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
Finding unused cells or wires in module \top..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module ===

   Number of wires:                  2
   Number of wire bits:              5
   Number of public wires:           2
   Number of public wire bits:       5
   Number of ports:                  2
   Number of port bits:              5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module ===

   Number of wires:                  2
   Number of wire bits:              3
   Number of public wires:           2
   Number of public wire bits:       3
   Number of ports:                  2
   Number of port bits:              3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== top ===

   Number of wires:                  3
   Number of wire bits:              6
   Number of public wires:           3
   Number of public wire bits:       6
   Number of ports:                  2
   Number of port bits:              2
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module      1
     $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module      1

=== design hierarchy ===

   top                               1
     $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module      1
     $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module      1

   Number of wires:                  7
   Number of wire bits:             14
   Number of public wires:           7
   Number of public wire bits:      14
   Number of ports:                  6
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

2.13. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module...
Checking module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module...
Checking module top...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module
Used module:     $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module

3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module
Used module:     $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
Optimizing module top.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
Optimizing module top.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'.
Finding identical cells in module `$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
  Optimizing cells in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module'.
Finding identical cells in module `$paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module..
Finding unused cells or wires in module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module..
Finding unused cells or wires in module \top..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$2a85f2c1993cc5d0487083ace11c25f9e3182c34\test_module.
Optimizing module $paramod$553ae4d13455974e3a64ff2625d861449941891e\test_module.
Optimizing module top.

5.9. Finished OPT passes. (There is nothing left to do.)

Warnings: 2 unique messages, 2 total
Yosys 0.44+9 (git sha1 4b9f45273, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
