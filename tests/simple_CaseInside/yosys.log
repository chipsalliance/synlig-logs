1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/CaseInside/top.sv:1:1: Compile module "work@top".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/CaseInside/top.sv:1:1: Top level module "work@top".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 1.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@top' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'sel' of type 'logic_net'
    Object 'y' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'case_stmt'
        Object 'sel' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'operation'
            Object '' of type 'constant'
          Object '' of type 'operation'
            Object '' of type 'constant'
          Object '' of type 'operation'
            Object '' of type 'constant'
          Object '' of type 'operation'
            Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
        Object '' of type 'case_item'
          Object '' of type 'operation'
            Object '' of type 'constant'
            Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'y' of type 'ref_obj'
            Object '' of type 'constant'
  Object 'work@top' of type 'module_inst'
    Object 'sel' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'sel' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'y' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
Generating RTLIL representation for module `\top'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/CaseInside/top.sv:1.1-7.16> str='\top'
      AST_WIRE <tests/simple_tests/CaseInside/top.sv:1.32-1.35> str='\sel' input logic port=1 dimensions=[2:0]
        AST_RANGE <tests/simple_tests/CaseInside/top.sv:1.26-1.31> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/CaseInside/top.sv:1.58-1.59> str='\y' output logic port=2 dimensions=[1:0]
        AST_RANGE <tests/simple_tests/CaseInside/top.sv:1.52-1.57> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/CaseInside/top.sv:2.3-6.10>
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/CaseInside/top.sv:2.3-6.10>
          AST_CASE <tests/simple_tests/CaseInside/top.sv:3.5-6.10>
            AST_IDENTIFIER <tests/simple_tests/CaseInside/top.sv:3.11-3.14> str='\sel'
            AST_COND <tests/simple_tests/CaseInside/top.sv:4.7-4.50>
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='000'(3) range=[2:0]
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='001'(3) range=[2:0] int=1
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='010'(3) range=[2:0] int=2
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='011'(3) range=[2:0] int=3
              AST_BLOCK <tests/simple_tests/CaseInside/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/CaseInside/top.sv:4.40-4.49>
                  AST_IDENTIFIER <tests/simple_tests/CaseInside/top.sv:4.40-4.41> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='01'(2) range=[1:0] int=1
            AST_COND <tests/simple_tests/CaseInside/top.sv:5.7-5.25>
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000100'(31) range=[30:0] int=4
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000101'(31) range=[30:0] int=5
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000110'(31) range=[30:0] int=6
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000111'(31) range=[30:0] int=7
              AST_BLOCK <tests/simple_tests/CaseInside/top.sv:0.0-0.0>
                AST_ASSIGN_EQ <tests/simple_tests/CaseInside/top.sv:5.15-5.24>
                  AST_IDENTIFIER <tests/simple_tests/CaseInside/top.sv:5.15-5.16> str='\y' in_lvalue
                  AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='10'(2) range=[1:0] int=2
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module top(sel, y);
      input [2:0] sel;
      output [1:0] y;
      (* always_comb = 1 *)
      always @*
        case (sel)
          3'b 000, 3'b 001, 3'b 010, 3'b 011:
            y = 2'b 01;
          31'b 0000000000000000000000000000100, 31'b 0000000000000000000000000000101, 31'b 0000000000000000000000000000110, 31'b 0000000000000000000000000000111:
            y = 2'b 10;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/CaseInside/top.sv:1.1-7.16> str='\top' basic_prep
      AST_WIRE <tests/simple_tests/CaseInside/top.sv:1.32-1.35> str='\sel' input logic basic_prep port=1 range=[2:0] dimensions=[2:0]
        AST_RANGE <tests/simple_tests/CaseInside/top.sv:1.26-1.31> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/CaseInside/top.sv:1.58-1.59> str='\y' output logic reg basic_prep port=2 range=[1:0] dimensions=[1:0]
        AST_RANGE <tests/simple_tests/CaseInside/top.sv:1.52-1.57> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/CaseInside/top.sv:2.3-6.10> basic_prep
        ATTR \always_comb:
          AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_BLOCK <tests/simple_tests/CaseInside/top.sv:2.3-6.10> basic_prep
          AST_CASE <tests/simple_tests/CaseInside/top.sv:3.5-6.10> basic_prep
            AST_IDENTIFIER <tests/simple_tests/CaseInside/top.sv:3.11-3.14> str='\sel' basic_prep
            AST_COND <tests/simple_tests/CaseInside/top.sv:4.7-4.50> basic_prep
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='000'(3) basic_prep range=[2:0]
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='010'(3) basic_prep range=[2:0] int=2
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='011'(3) basic_prep range=[2:0] int=3
              AST_BLOCK <tests/simple_tests/CaseInside/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/CaseInside/top.sv:4.40-4.49> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/CaseInside/top.sv:4.40-4.41> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='01'(2) basic_prep range=[1:0] int=1
            AST_COND <tests/simple_tests/CaseInside/top.sv:5.7-5.25> basic_prep
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000100'(31) basic_prep range=[30:0] int=4
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000101'(31) basic_prep range=[30:0] int=5
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000110'(31) basic_prep range=[30:0] int=6
              AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='0000000000000000000000000000111'(31) basic_prep range=[30:0] int=7
              AST_BLOCK <tests/simple_tests/CaseInside/top.sv:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/CaseInside/top.sv:5.15-5.24> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/CaseInside/top.sv:5.15-5.16> str='\y' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/CaseInside/top.sv:0.0-0.0> bits='10'(2) basic_prep range=[1:0] int=2
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module top(sel, y);
      input [2:0] sel;
      output reg [1:0] y;
      (* always_comb = 1 *)
      always @*
        case (sel)
          3'b 000, 3'b 001, 3'b 010, 3'b 011:
            y = 2'b 01;
          31'b 0000000000000000000000000000100, 31'b 0000000000000000000000000000101, 31'b 0000000000000000000000000000110, 31'b 0000000000000000000000000000111:
            y = 2'b 10;
        endcase
    endmodule
--- END OF AST DUMP ---

2. Executing Verilog backend.

2.1. Executing BMUXMAP pass.

2.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.44+9 (git sha1 4b9f45273, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\top'.
Warning: Module top contains RTLIL processes with sync rules. Such RTLIL processes can't always be mapped directly to Verilog always blocks. unintended changes in simulation behavior are possible! Use "proc" to convert processes to logic networks and registers.

(* cells_not_processed =  1  *)
(* src = "tests/simple_tests/CaseInside/top.sv:1.1-7.16" *)
module top(sel, y);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  (* src = "tests/simple_tests/CaseInside/top.sv:2.3-6.10" *)
  reg [1:0] _0_;
  (* src = "tests/simple_tests/CaseInside/top.sv:2.3-6.10" *)
  reg [1:0] _1_;
  (* src = "tests/simple_tests/CaseInside/top.sv:1.32-1.35" *)
  input [2:0] sel;
  wire [2:0] sel;
  (* src = "tests/simple_tests/CaseInside/top.sv:1.58-1.59" *)
  output [1:0] y;
  reg [1:0] y;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    _0_ = _1_;
    (* src = "tests/simple_tests/CaseInside/top.sv:3.5-6.10" *)
    casez ({ 28'h0000000, sel })
      /* src = "tests/simple_tests/CaseInside/top.sv:4.7-4.50" */
      31'h00000000, 31'h00000001, 31'h00000002, 31'h00000003:
          _1_ = 2'h1;
      /* src = "tests/simple_tests/CaseInside/top.sv:5.7-5.25" */
      31'h00000004, 31'h00000005, 31'h00000006, 31'h00000007:
          _1_ = 2'h2;
      default:
          _1_ = y;
    endcase
  end
  always @* begin
      y <= _0_;
  end
endmodule

Warnings: 1 unique messages, 1 total
Yosys 0.44+9 (git sha1 4b9f45273, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
