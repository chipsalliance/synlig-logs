1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[WRN:PA0205] tests/simple_tests/fsm_single_always/dut.v:8:1: No timescale set for "fsm_using_single_always".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/fsm_single_always/dut.v:8:1: Compile module "work@fsm_using_single_always".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/fsm_single_always/dut.v:8:1: Top level module "work@fsm_using_single_always".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 0.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:34:12: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:40:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:44:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:46:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:49:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:52:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:55:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:58:26: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_single_always/dut.v:60:23: Non-synthesizable construct "".
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 10
[   NOTE] : 5
Object 'work@fsm_using_single_always' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'SIZE' of type 'parameter'
    Object 'IDLE' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object 'GNT0' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object 'GNT1' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'SIZE' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'IDLE' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'GNT0' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'GNT1' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object 'clock' of type 'logic_net'
    Object 'reset' of type 'logic_net'
    Object 'req_0' of type 'logic_net'
    Object 'req_1' of type 'logic_net'
    Object 'gnt_0' of type 'logic_net'
    Object 'gnt_1' of type 'logic_net'
    Object 'state' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'operation'
            Object 'SIZE' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'next_state' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'operation'
            Object 'SIZE' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'constant'
    Object '' of type 'always'
      Object '' of type 'event_control'
        Object '' of type 'operation'
          Object 'clock' of type 'ref_obj'
        Object 'FSM' of type 'named_begin'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'reset' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'state' of type 'ref_obj'
                Object 'IDLE' of type 'ref_obj'
              Object '' of type 'assignment'
                Object 'gnt_0' of type 'ref_obj'
                Object '' of type 'constant'
              Object '' of type 'assignment'
                Object 'gnt_1' of type 'ref_obj'
                Object '' of type 'constant'
            Object '' of type 'case_stmt'
              Object 'state' of type 'ref_obj'
              Object '' of type 'case_item'
                Object 'IDLE' of type 'ref_obj'
                Object '' of type 'if_else'
                  Object '' of type 'operation'
                    Object 'req_0' of type 'ref_obj'
                    Object '' of type 'constant'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'state' of type 'ref_obj'
                      Object 'GNT0' of type 'ref_obj'
                    Object '' of type 'assignment'
                      Object 'gnt_0' of type 'ref_obj'
                      Object '' of type 'constant'
                  Object '' of type 'if_else'
                    Object '' of type 'operation'
                      Object 'req_1' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'begin'
                      Object '' of type 'assignment'
                        Object 'gnt_1' of type 'ref_obj'
                        Object '' of type 'constant'
                      Object '' of type 'assignment'
                        Object 'state' of type 'ref_obj'
                        Object 'GNT1' of type 'ref_obj'
                    Object '' of type 'begin'
                      Object '' of type 'assignment'
                        Object 'state' of type 'ref_obj'
                        Object 'IDLE' of type 'ref_obj'
              Object '' of type 'case_item'
                Object 'GNT0' of type 'ref_obj'
                Object '' of type 'if_else'
                  Object '' of type 'operation'
                    Object 'req_0' of type 'ref_obj'
                    Object '' of type 'constant'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'state' of type 'ref_obj'
                      Object 'GNT0' of type 'ref_obj'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'gnt_0' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'assignment'
                      Object 'state' of type 'ref_obj'
                      Object 'IDLE' of type 'ref_obj'
              Object '' of type 'case_item'
                Object 'GNT1' of type 'ref_obj'
                Object '' of type 'if_else'
                  Object '' of type 'operation'
                    Object 'req_1' of type 'ref_obj'
                    Object '' of type 'constant'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'state' of type 'ref_obj'
                      Object 'GNT1' of type 'ref_obj'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'gnt_1' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'assignment'
                      Object 'state' of type 'ref_obj'
                      Object 'IDLE' of type 'ref_obj'
              Object '' of type 'case_item'
                Object '' of type 'assignment'
                  Object 'state' of type 'ref_obj'
                  Object 'IDLE' of type 'ref_obj'
  Object 'work@fsm_using_single_always' of type 'module_inst'
    Object 'SIZE' of type 'parameter'
    Object 'IDLE' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object 'GNT0' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object 'GNT1' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'SIZE' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'IDLE' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'GNT0' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'GNT1' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object 'clock' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'reset' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'req_0' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'req_1' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'gnt_0' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'gnt_1' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'clock' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'reset' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'req_0' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'req_1' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'gnt_0' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'gnt_1' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'state' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'next_state' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
Generating RTLIL representation for module `\fsm_using_single_always'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/fsm_single_always/dut.v:8.1-64.10> str='\fsm_using_single_always'
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:25.11-25.19> str='\SIZE' multirange=[ 0 32 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000011'(32) range=[31:0] int=3
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:26.11-26.25> str='\IDLE' multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='001'(3) range=[2:0] int=1
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0]
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:26.26-26.39> str='\GNT0' multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='010'(3) range=[2:0] int=2
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0]
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:26.40-26.53> str='\GNT1' multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='100'(3) range=[2:0] int=4
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.9-21.14> str='\clock' input logic port=1 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.15-21.20> str='\reset' input logic port=2 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.21-21.26> str='\req_0' input logic port=3 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.27-21.32> str='\req_1' input logic port=4 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:23.9-23.14> str='\gnt_0' output reg port=5 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:23.15-23.20> str='\gnt_1' output reg port=6 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:28.27-28.32> str='\state' reg
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:28.7-28.17>
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:29.27-29.37> str='\next_state' reg
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:29.7-29.17>
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
      AST_ALWAYS <tests/simple_tests/fsm_single_always/dut.v:31.1-62.4>
        AST_POSEDGE <tests/simple_tests/fsm_single_always/dut.v:31.11-31.24>
          AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:31.19-31.24> str='\clock'
        AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:31.8-31.25>
          AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:32.9-32.12> str='\FSM'
            AST_CASE <tests/simple_tests/fsm_single_always/dut.v:33.1-61.8>
              AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                AST_EQ <tests/simple_tests/fsm_single_always/dut.v:33.5-33.18>
                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:33.5-33.10> str='\reset'
                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
              AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:33.20-37.4>
                    AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:34.3-34.19>
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:34.3-34.8> str='\state'
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:34.15-34.19> str='\IDLE'
                    AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:35.3-35.13>
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:35.3-35.8> str='\gnt_0'
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
                    AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:36.3-36.13>
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:36.3-36.8> str='\gnt_1'
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
              AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                  AST_CASE <tests/simple_tests/fsm_single_always/dut.v:38.2-61.8>
                    AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:38.7-38.12> str='\state'
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:39.4-47.18>
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:39.4-39.8> str='\IDLE'
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                        AST_CASE <tests/simple_tests/fsm_single_always/dut.v:39.11-47.18>
                          AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_EQ <tests/simple_tests/fsm_single_always/dut.v:39.15-39.28>
                              AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:39.15-39.20> str='\req_0'
                              AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:39.30-42.18>
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:40.17-40.33>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:40.17-40.22> str='\state'
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:40.29-40.33> str='\GNT0'
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:41.17-41.27>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:41.17-41.22> str='\gnt_0'
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                              AST_CASE <tests/simple_tests/fsm_single_always/dut.v:42.24-47.18>
                                AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                                  AST_EQ <tests/simple_tests/fsm_single_always/dut.v:42.28-42.41>
                                    AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:42.28-42.33> str='\req_1'
                                    AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                                AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                                  AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                                    AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:42.43-45.18>
                                      AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:43.17-43.27>
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:43.17-43.22> str='\gnt_1'
                                        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
                                      AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:44.17-44.33>
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:44.17-44.22> str='\state'
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:44.29-44.33> str='\GNT1'
                                AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                                  AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                                  AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                                    AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:45.24-47.18>
                                      AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:46.17-46.33>
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:46.17-46.22> str='\state'
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:46.29-46.33> str='\IDLE'
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:48.4-53.18>
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:48.4-48.8> str='\GNT0'
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                        AST_CASE <tests/simple_tests/fsm_single_always/dut.v:48.11-53.18>
                          AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_EQ <tests/simple_tests/fsm_single_always/dut.v:48.15-48.28>
                              AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:48.15-48.20> str='\req_0'
                              AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:48.30-50.18>
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:49.17-49.33>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:49.17-49.22> str='\state'
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:49.29-49.33> str='\GNT0'
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:50.24-53.18>
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:51.17-51.27>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:51.17-51.22> str='\gnt_0'
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:52.17-52.33>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:52.17-52.22> str='\state'
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:52.29-52.33> str='\IDLE'
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:54.4-59.18>
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:54.4-54.8> str='\GNT1'
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                        AST_CASE <tests/simple_tests/fsm_single_always/dut.v:54.11-59.18>
                          AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_EQ <tests/simple_tests/fsm_single_always/dut.v:54.15-54.28>
                              AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:54.15-54.20> str='\req_1'
                              AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:54.30-56.18>
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:55.17-55.33>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:55.17-55.22> str='\state'
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:55.29-55.33> str='\GNT1'
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:56.24-59.18>
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:57.17-57.27>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:57.17-57.22> str='\gnt_1'
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0]
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:58.17-58.33>
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:58.17-58.22> str='\state'
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:58.29-58.33> str='\IDLE'
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:60.4-60.31>
                      AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0>
                        AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:60.14-60.30>
                          AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:60.14-60.19> str='\state'
                          AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:60.26-60.30> str='\IDLE'
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module fsm_using_single_always(clock, reset, req_0, req_1, gnt_0, gnt_1);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      input [0:0] clock;
      input [0:0] reset;
      input [0:0] req_0;
      input [0:0] req_1;
      output reg [0:0] gnt_0;
      output reg [0:0] gnt_1;
      reg [2:0] state;
      reg [2:0] next_state;
      always @(posedge clock)
        case (|((reset)==(1'b 1)))
          1'b 1:
            begin
              state <= IDLE;
              gnt_0 <= 0;
              gnt_1 <= 0;
            end
          default:
            case (state)
              IDLE:
                case (|((req_0)==(1'b 1)))
                  1'b 1:
                    begin
                      state <= GNT0;
                      gnt_0 <= 1;
                    end
                  default:
                    case (|((req_1)==(1'b 1)))
                      1'b 1:
                        begin
                          gnt_1 <= 1;
                          state <= GNT1;
                        end
                      default:
                        state <= IDLE;
                    endcase
                endcase
              GNT0:
                case (|((req_0)==(1'b 1)))
                  1'b 1:
                    state <= GNT0;
                  default:
                    begin
                      gnt_0 <= 0;
                      state <= IDLE;
                    end
                endcase
              GNT1:
                case (|((req_1)==(1'b 1)))
                  1'b 1:
                    state <= GNT1;
                  default:
                    begin
                      gnt_1 <= 0;
                      state <= IDLE;
                    end
                endcase
              default:
                state <= IDLE;
            endcase
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/fsm_single_always/dut.v:8.1-64.10> str='\fsm_using_single_always' basic_prep
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:25.11-25.19> str='\SIZE' basic_prep range=[31:0] multirange=[ 0 32 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000011'(32) basic_prep range=[31:0] int=3
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:26.11-26.25> str='\IDLE' basic_prep range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0]
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:26.26-26.39> str='\GNT0' basic_prep range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='010'(3) basic_prep range=[2:0] int=2
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0]
      AST_PARAMETER <tests/simple_tests/fsm_single_always/dut.v:26.40-26.53> str='\GNT1' basic_prep range=[2:0] multirange=[ 0 3 ] multirange_swapped=[ 0 ]
        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='100'(3) basic_prep range=[2:0] int=4
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.9-21.14> str='\clock' input logic basic_prep port=1 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.15-21.20> str='\reset' input logic basic_prep port=2 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.21-21.26> str='\req_0' input logic basic_prep port=3 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:21.27-21.32> str='\req_1' input logic basic_prep port=4 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:23.9-23.14> str='\gnt_0' output reg basic_prep port=5 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:23.15-23.20> str='\gnt_1' output reg basic_prep port=6 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep range=[0:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:28.27-28.32> str='\state' reg basic_prep range=[2:0]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:28.7-28.17> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_WIRE <tests/simple_tests/fsm_single_always/dut.v:29.27-29.37> str='\next_state' reg basic_prep range=[2:0]
        AST_RANGE <tests/simple_tests/fsm_single_always/dut.v:29.7-29.17> basic_prep range=[2:0]
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2
          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
      AST_ALWAYS <tests/simple_tests/fsm_single_always/dut.v:31.1-62.4> basic_prep
        AST_POSEDGE <tests/simple_tests/fsm_single_always/dut.v:31.11-31.24> basic_prep
          AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:31.19-31.24> str='\clock' basic_prep
        AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:31.8-31.25> basic_prep
          AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:32.9-32.12> basic_prep
            AST_CASE <tests/simple_tests/fsm_single_always/dut.v:33.1-61.8> basic_prep
              AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                AST_EQ <tests/simple_tests/fsm_single_always/dut.v:33.5-33.18> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:33.5-33.10> str='\reset' basic_prep
                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
              AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                  AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:33.20-37.4> basic_prep
                    AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:34.3-34.19> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:34.3-34.8> str='\state' basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:34.15-34.19> bits='001'(3) basic_prep range=[2:0] int=1
                    AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:35.3-35.13> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:35.3-35.8> str='\gnt_0' basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
                    AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:36.3-36.13> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:36.3-36.8> str='\gnt_1' basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
              AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                  AST_CASE <tests/simple_tests/fsm_single_always/dut.v:38.2-61.8> basic_prep
                    AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:38.7-38.12> str='\state' basic_prep
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:39.4-47.18> basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:39.4-39.8> bits='001'(3) basic_prep range=[2:0] int=1
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                        AST_CASE <tests/simple_tests/fsm_single_always/dut.v:39.11-47.18> basic_prep
                          AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_EQ <tests/simple_tests/fsm_single_always/dut.v:39.15-39.28> basic_prep
                              AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:39.15-39.20> str='\req_0' basic_prep
                              AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:39.30-42.18> basic_prep
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:40.17-40.33> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:40.17-40.22> str='\state' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:40.29-40.33> bits='010'(3) basic_prep range=[2:0] int=2
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:41.17-41.27> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:41.17-41.22> str='\gnt_0' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                              AST_CASE <tests/simple_tests/fsm_single_always/dut.v:42.24-47.18> basic_prep
                                AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                                  AST_EQ <tests/simple_tests/fsm_single_always/dut.v:42.28-42.41> basic_prep
                                    AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:42.28-42.33> str='\req_1' basic_prep
                                    AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                                AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                                  AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                                    AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:42.43-45.18> basic_prep
                                      AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:43.17-43.27> basic_prep
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:43.17-43.22> str='\gnt_1' basic_prep
                                        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
                                      AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:44.17-44.33> basic_prep
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:44.17-44.22> str='\state' basic_prep
                                        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:44.29-44.33> bits='100'(3) basic_prep range=[2:0] int=4
                                AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                                  AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                                  AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                                    AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:45.24-47.18> basic_prep
                                      AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:46.17-46.33> basic_prep
                                        AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:46.17-46.22> str='\state' basic_prep
                                        AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:46.29-46.33> bits='001'(3) basic_prep range=[2:0] int=1
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:48.4-53.18> basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:48.4-48.8> bits='010'(3) basic_prep range=[2:0] int=2
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                        AST_CASE <tests/simple_tests/fsm_single_always/dut.v:48.11-53.18> basic_prep
                          AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_EQ <tests/simple_tests/fsm_single_always/dut.v:48.15-48.28> basic_prep
                              AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:48.15-48.20> str='\req_0' basic_prep
                              AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:48.30-50.18> basic_prep
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:49.17-49.33> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:49.17-49.22> str='\state' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:49.29-49.33> bits='010'(3) basic_prep range=[2:0] int=2
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:50.24-53.18> basic_prep
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:51.17-51.27> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:51.17-51.22> str='\gnt_0' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:52.17-52.33> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:52.17-52.22> str='\state' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:52.29-52.33> bits='001'(3) basic_prep range=[2:0] int=1
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:54.4-59.18> basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:54.4-54.8> bits='100'(3) basic_prep range=[2:0] int=4
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                        AST_CASE <tests/simple_tests/fsm_single_always/dut.v:54.11-59.18> basic_prep
                          AST_REDUCE_BOOL <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_EQ <tests/simple_tests/fsm_single_always/dut.v:54.15-54.28> basic_prep
                              AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:54.15-54.20> str='\req_1' basic_prep
                              AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:54.30-56.18> basic_prep
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:55.17-55.33> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:55.17-55.22> str='\state' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:55.29-55.33> bits='100'(3) basic_prep range=[2:0] int=4
                          AST_COND <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                            AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                              AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:56.24-59.18> basic_prep
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:57.17-57.27> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:57.17-57.22> str='\gnt_1' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
                                AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:58.17-58.33> basic_prep
                                  AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:58.17-58.22> str='\state' basic_prep
                                  AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:58.29-58.33> bits='001'(3) basic_prep range=[2:0] int=1
                    AST_COND <tests/simple_tests/fsm_single_always/dut.v:60.4-60.31> basic_prep
                      AST_DEFAULT <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                      AST_BLOCK <tests/simple_tests/fsm_single_always/dut.v:0.0-0.0> basic_prep
                        AST_ASSIGN_LE <tests/simple_tests/fsm_single_always/dut.v:60.14-60.30> basic_prep
                          AST_IDENTIFIER <tests/simple_tests/fsm_single_always/dut.v:60.14-60.19> str='\state' basic_prep
                          AST_CONSTANT <tests/simple_tests/fsm_single_always/dut.v:60.26-60.30> bits='001'(3) basic_prep range=[2:0] int=1
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module fsm_using_single_always(clock, reset, req_0, req_1, gnt_0, gnt_1);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      input [0:0] clock;
      input [0:0] reset;
      input [0:0] req_0;
      input [0:0] req_1;
      output reg [0:0] gnt_0;
      output reg [0:0] gnt_1;
      reg [2:0] state;
      reg [2:0] next_state;
      always @(posedge clock)
        case (|((reset)==(1'b 1)))
          1'b 1:
            begin
              state <= 3'b 001;
              gnt_0 <= 0;
              gnt_1 <= 0;
            end
          default:
            case (state)
              3'b 001:
                case (|((req_0)==(1'b 1)))
                  1'b 1:
                    begin
                      state <= 3'b 010;
                      gnt_0 <= 1;
                    end
                  default:
                    case (|((req_1)==(1'b 1)))
                      1'b 1:
                        begin
                          gnt_1 <= 1;
                          state <= 3'b 100;
                        end
                      default:
                        state <= 3'b 001;
                    endcase
                endcase
              3'b 010:
                case (|((req_0)==(1'b 1)))
                  1'b 1:
                    state <= 3'b 010;
                  default:
                    begin
                      gnt_0 <= 0;
                      state <= 3'b 001;
                    end
                endcase
              3'b 100:
                case (|((req_1)==(1'b 1)))
                  1'b 1:
                    state <= 3'b 100;
                  default:
                    begin
                      gnt_1 <= 0;
                      state <= 3'b 001;
                    end
                endcase
              default:
                state <= 3'b 001;
            endcase
        endcase
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \fsm_using_single_always

2.1.2. Analyzing design hierarchy..
Top module:  \fsm_using_single_always
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$tests/simple_tests/fsm_single_always/dut.v:31$1 in module fsm_using_single_always.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fsm_using_single_always.$proc$tests/simple_tests/fsm_single_always/dut.v:31$1'.
     1/3: $0\state[2:0]
     2/3: $0\gnt_1[0:0]
     3/3: $0\gnt_0[0:0]

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fsm_using_single_always.\gnt_0' using process `\fsm_using_single_always.$proc$tests/simple_tests/fsm_single_always/dut.v:31$1'.
  created $dff cell `$procdff$57' with positive edge clock.
Creating register for signal `\fsm_using_single_always.\gnt_1' using process `\fsm_using_single_always.$proc$tests/simple_tests/fsm_single_always/dut.v:31$1'.
  created $dff cell `$procdff$58' with positive edge clock.
Creating register for signal `\fsm_using_single_always.\state' using process `\fsm_using_single_always.$proc$tests/simple_tests/fsm_single_always/dut.v:31$1'.
  created $dff cell `$procdff$59' with positive edge clock.

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\fsm_using_single_always.$proc$tests/simple_tests/fsm_single_always/dut.v:31$1'.
Removing empty process `fsm_using_single_always.$proc$tests/simple_tests/fsm_single_always/dut.v:31$1'.
Cleaned up 6 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_single_always.
<suppressed ~5 debug messages>

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_single_always.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_single_always..
Removed 0 unused cells and 21 unused wires.
<suppressed ~2 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module fsm_using_single_always...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_single_always.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_single_always'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_using_single_always..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_using_single_always.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_single_always'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_single_always..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.6.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_single_always.

2.6.8. Rerunning OPT passes. (Maybe there is more to do..)

2.6.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_using_single_always..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.6.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_using_single_always.
Performed a total of 0 changes.

2.6.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_single_always'.
Removed a total of 0 cells.

2.6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_single_always..

2.6.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_single_always.

2.6.14. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from mux cell fsm_using_single_always.$procmux$14 ($mux).
Removed top 1 bits (of 3) from port B of cell fsm_using_single_always.$procmux$16_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell fsm_using_single_always.$procmux$23_CMP0 ($eq).
Removed top 1 bits (of 3) from wire fsm_using_single_always.$procmux$14_Y.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_single_always..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.9. Executing MEMORY_COLLECT pass (generating $mem cells).

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_single_always.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_single_always'.
Removed a total of 0 cells.

2.10.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_single_always..

2.10.4. Finished fast OPT passes.

2.11. Printing statistics.

=== fsm_using_single_always ===

   Number of wires:                 24
   Number of wire bits:             36
   Number of public wires:           7
   Number of public wire bits:       9
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $dff                            3
     $eq                             3
     $mux                           11
     $pmux                           3

2.12. Executing CHECK pass (checking for obvious problems).
Checking module fsm_using_single_always...
Found and reported 0 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.30+16 (git sha1 8b2a00102, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\fsm_using_single_always'.

(* top =  1  *)
(* src = "tests/simple_tests/fsm_single_always/dut.v:8.1-64.10" *)
module fsm_using_single_always(clock, reset, req_0, req_1, gnt_0, gnt_1);
  (* src = "tests/simple_tests/fsm_single_always/dut.v:31.1-62.4" *)
  wire _00_;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:31.1-62.4" *)
  wire _01_;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:31.1-62.4" *)
  wire [2:0] _02_;
  wire [2:0] _03_;
  wire [2:0] _04_;
  wire _05_;
  wire _06_;
  wire [2:0] _07_;
  wire [2:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:21.9-21.14" *)
  input clock;
  wire clock;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:23.9-23.14" *)
  output gnt_0;
  reg gnt_0;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:23.15-23.20" *)
  output gnt_1;
  reg gnt_1;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:21.21-21.26" *)
  input req_0;
  wire req_0;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:21.27-21.32" *)
  input req_1;
  wire req_1;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:21.15-21.20" *)
  input reset;
  wire reset;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:28.27-28.32" *)
  reg [2:0] state;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:31.1-62.4" *)
  always @(posedge clock)
    gnt_0 <= _00_;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:31.1-62.4" *)
  always @(posedge clock)
    gnt_1 <= _01_;
  (* src = "tests/simple_tests/fsm_single_always/dut.v:31.1-62.4" *)
  always @(posedge clock)
    state <= _02_;
  function [2:0] _20_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "tests/simple_tests/fsm_single_always/dut.v:54.4-59.18|tests/simple_tests/fsm_single_always/dut.v:38.2-61.8" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _20_ = b[2:0];
      3'b?1?:
        _20_ = b[5:3];
      3'b1??:
        _20_ = b[8:6];
      default:
        _20_ = a;
    endcase
  endfunction
  assign _04_ = _20_(3'h1, { _08_, 1'h0, _03_[1:0], _07_ }, { _09_, _06_, _05_ });
  assign _05_ = state == (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:54.4-59.18|tests/simple_tests/fsm_single_always/dut.v:38.2-61.8" *) 3'h4;
  assign _03_[1:0] = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:48.11-53.18" *) 2'h2 : 2'h1;
  assign _06_ = state == (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:48.4-53.18|tests/simple_tests/fsm_single_always/dut.v:38.2-61.8" *) 2'h2;
  assign _07_ = req_1 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:42.24-47.18" *) 3'h4 : 3'h1;
  assign _08_ = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:39.11-47.18" *) 3'h2 : _07_;
  assign _09_ = state == (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:39.4-47.18|tests/simple_tests/fsm_single_always/dut.v:38.2-61.8" *) 1'h1;
  assign _02_ = reset ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:33.1-61.8" *) 3'h1 : _04_;
  assign _10_ = req_1 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:54.11-59.18" *) gnt_1 : 1'h0;
  function [0:0] _29_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "tests/simple_tests/fsm_single_always/dut.v:54.4-59.18|tests/simple_tests/fsm_single_always/dut.v:38.2-61.8" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _29_ = b[0:0];
      2'b1?:
        _29_ = b[1:1];
      default:
        _29_ = a;
    endcase
  endfunction
  assign _11_ = _29_(gnt_1, { _13_, _10_ }, { _09_, _05_ });
  assign _12_ = req_1 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:42.24-47.18" *) 1'h1 : gnt_1;
  assign _13_ = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:39.11-47.18" *) gnt_1 : _12_;
  assign _01_ = reset ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:33.1-61.8" *) 1'h0 : _11_;
  assign _14_ = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:48.11-53.18" *) gnt_0 : 1'h0;
  function [0:0] _34_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "tests/simple_tests/fsm_single_always/dut.v:48.4-53.18|tests/simple_tests/fsm_single_always/dut.v:38.2-61.8" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _34_ = b[0:0];
      2'b1?:
        _34_ = b[1:1];
      default:
        _34_ = a;
    endcase
  endfunction
  assign _15_ = _34_(gnt_0, { _16_, _14_ }, { _09_, _06_ });
  assign _16_ = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:39.11-47.18" *) 1'h1 : gnt_0;
  assign _00_ = reset ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_single_always/dut.v:0.0-0.0|tests/simple_tests/fsm_single_always/dut.v:33.1-61.8" *) 1'h0 : _15_;
  assign _03_[2] = 1'h0;
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\fsm_using_single_always'.

5. Executing SIM pass (simulate the circuit).
Simulating cycle 0.
Simulating cycle 1.
Simulating cycle 2.
Simulating cycle 3.
Simulating cycle 4.
Simulating cycle 5.
Simulating cycle 6.
Simulating cycle 7.
Simulating cycle 8.
Simulating cycle 9.
Simulating cycle 10.
Simulating cycle 11.
Simulating cycle 12.
Simulating cycle 13.
Simulating cycle 14.
Simulating cycle 15.
Simulating cycle 16.
Simulating cycle 17.
Simulating cycle 18.
Simulating cycle 19.
Simulating cycle 20.
Simulating cycle 21.
Simulating cycle 22.
Simulating cycle 23.
Simulating cycle 24.
Simulating cycle 25.
Simulating cycle 26.
Simulating cycle 27.
Simulating cycle 28.
Simulating cycle 29.
Simulating cycle 30.
Simulating cycle 31.
Simulating cycle 32.
Simulating cycle 33.
Simulating cycle 34.
Simulating cycle 35.
Simulating cycle 36.
Simulating cycle 37.
Simulating cycle 38.
Simulating cycle 39.
Simulating cycle 40.

Yosys 0.30+16 (git sha1 8b2a00102, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
