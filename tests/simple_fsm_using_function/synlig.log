1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/fsm_using_function/dut.v:7:1: Compile module "work@fsm_using_function".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/fsm_using_function/dut.v:7:1: Top level module "work@fsm_using_function".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 0.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:61:14: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:63:14: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:70:12: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:71:12: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:76:28: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:77:28: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:80:29: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:81:29: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:84:29: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:85:29: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:88:30: Non-synthesizable construct "".
[WRN:UH0720] tests/simple_tests/fsm_using_function/dut.v:89:30: Non-synthesizable construct "".
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 12
[   NOTE] : 5
Object 'work@fsm_using_function' of type 'design'
  Object 'builtin' of type 'package'
  Object 'work@fsm_using_function' of type 'module_inst'
    Object 'fsm_function' of type 'function'
      Object '' of type 'logic_var'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'operation'
              Object 'SIZE' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'state' of type 'io_decl'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'operation'
              Object 'SIZE' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'req_0' of type 'io_decl'
        Object '' of type 'logic_typespec'
      Object 'req_1' of type 'io_decl'
        Object '' of type 'logic_typespec'
      Object '' of type 'case_stmt'
        Object 'state' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'req_0' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'GNT0' of type 'ref_obj'
            Object '' of type 'if_else'
              Object '' of type 'operation'
                Object 'req_1' of type 'ref_obj'
                Object '' of type 'constant'
              Object '' of type 'begin'
                Object '' of type 'assignment'
                  Object 'fsm_function' of type 'ref_obj'
                  Object 'GNT1' of type 'ref_obj'
              Object '' of type 'begin'
                Object '' of type 'assignment'
                  Object 'fsm_function' of type 'ref_obj'
                  Object 'IDLE' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'req_0' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'GNT0' of type 'ref_obj'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'IDLE' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'req_1' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'GNT1' of type 'ref_obj'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'IDLE' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'fsm_function' of type 'ref_obj'
            Object 'IDLE' of type 'ref_obj'
    Object 'SIZE' of type 'parameter'
    Object 'IDLE' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object 'GNT0' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object 'GNT1' of type 'parameter'
      Object '' of type 'range'
        Object '' of type 'constant'
        Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'SIZE' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'IDLE' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'GNT0' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'GNT1' of type 'parameter'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
      Object '' of type 'constant'
    Object 'fsm_function' of type 'function'
      Object '' of type 'logic_var'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'operation'
              Object 'SIZE' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'state' of type 'io_decl'
        Object '' of type 'logic_typespec'
          Object '' of type 'range'
            Object '' of type 'operation'
              Object 'SIZE' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'constant'
      Object 'req_0' of type 'io_decl'
        Object '' of type 'logic_typespec'
      Object 'req_1' of type 'io_decl'
        Object '' of type 'logic_typespec'
      Object '' of type 'case_stmt'
        Object 'state' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'req_0' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'GNT0' of type 'ref_obj'
            Object '' of type 'if_else'
              Object '' of type 'operation'
                Object 'req_1' of type 'ref_obj'
                Object '' of type 'constant'
              Object '' of type 'begin'
                Object '' of type 'assignment'
                  Object 'fsm_function' of type 'ref_obj'
                  Object 'GNT1' of type 'ref_obj'
              Object '' of type 'begin'
                Object '' of type 'assignment'
                  Object 'fsm_function' of type 'ref_obj'
                  Object 'IDLE' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'req_0' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'GNT0' of type 'ref_obj'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'IDLE' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'constant'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'req_1' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'GNT1' of type 'ref_obj'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'fsm_function' of type 'ref_obj'
                Object 'IDLE' of type 'ref_obj'
        Object '' of type 'case_item'
          Object '' of type 'assignment'
            Object 'fsm_function' of type 'ref_obj'
            Object 'IDLE' of type 'ref_obj'
    Object 'clock' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'reset' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'req_0' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'req_1' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'gnt_0' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'gnt_1' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'clock' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'reset' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'req_0' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'req_1' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'gnt_0' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'gnt_1' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'state' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'next_state' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object '' of type 'always'
      Object '' of type 'event_control'
        Object '' of type 'operation'
          Object 'clock' of type 'ref_obj'
        Object 'FSM_SEQ' of type 'named_begin'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'reset' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'state' of type 'ref_obj'
                Object 'IDLE' of type 'ref_obj'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'state' of type 'ref_obj'
                Object 'next_state' of type 'ref_obj'
    Object '' of type 'always'
      Object '' of type 'event_control'
        Object '' of type 'operation'
          Object 'clock' of type 'ref_obj'
        Object 'OUTPUT_LOGIC' of type 'named_begin'
          Object '' of type 'if_else'
            Object '' of type 'operation'
              Object 'reset' of type 'ref_obj'
              Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'assignment'
                Object 'gnt_0' of type 'ref_obj'
                Object '' of type 'constant'
              Object '' of type 'assignment'
                Object 'gnt_1' of type 'ref_obj'
                Object '' of type 'constant'
            Object '' of type 'begin'
              Object '' of type 'case_stmt'
                Object 'state' of type 'ref_obj'
                Object '' of type 'case_item'
                  Object '' of type 'constant'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'gnt_0' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'assignment'
                      Object 'gnt_1' of type 'ref_obj'
                      Object '' of type 'constant'
                Object '' of type 'case_item'
                  Object '' of type 'constant'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'gnt_0' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'assignment'
                      Object 'gnt_1' of type 'ref_obj'
                      Object '' of type 'constant'
                Object '' of type 'case_item'
                  Object '' of type 'constant'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'gnt_0' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'assignment'
                      Object 'gnt_1' of type 'ref_obj'
                      Object '' of type 'constant'
                Object '' of type 'case_item'
                  Object '' of type 'begin'
                    Object '' of type 'assignment'
                      Object 'gnt_0' of type 'ref_obj'
                      Object '' of type 'constant'
                    Object '' of type 'assignment'
                      Object 'gnt_1' of type 'ref_obj'
                      Object '' of type 'constant'
    Object '' of type 'cont_assign'
      Object 'next_state' of type 'ref_obj'
      Object 'fsm_function' of type 'func_call'
        Object 'state' of type 'ref_obj'
        Object 'req_0' of type 'ref_obj'
        Object 'req_1' of type 'ref_obj'
Generating RTLIL representation for module `\fsm_using_function'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/fsm_using_function/dut.v:7.1-95.10> str='\fsm_using_function'
      AST_FUNCTION <tests/simple_tests/fsm_using_function/dut.v:32.1-56.12> str='\fsm_function'
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> str='\fsm_function' logic
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> in_param
            AST_SUB <tests/simple_tests/fsm_using_function/dut.v:32.11-32.17> in_param
              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:32.11-32.15> str='\SIZE' in_param
              AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:33.22-33.27> str='\state' input logic port=4 dimensions=[2:0]
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:33.10-33.20> basic_prep range=[2:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:33.11-33.17> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:34.12-34.17> str='\req_0' input logic port=5 dimensions=[0:0]
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:35.12-35.17> str='\req_1' input logic port=6 dimensions=[0:0]
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_CASE <tests/simple_tests/fsm_using_function/dut.v:36.3-55.10>
          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:36.8-36.13> str='\state'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:37.4-43.18>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) range=[2:0] int=1
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_CASE <tests/simple_tests/fsm_using_function/dut.v:37.11-43.18>
                AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_EQ <tests/simple_tests/fsm_using_function/dut.v:37.15-37.28>
                    AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:37.15-37.20> str='\req_0'
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:37.30-39.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:38.17-38.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:38.17-38.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:38.32-38.36> str='\GNT0'
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_CASE <tests/simple_tests/fsm_using_function/dut.v:39.24-43.18>
                      AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_EQ <tests/simple_tests/fsm_using_function/dut.v:39.28-39.41>
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:39.28-39.33> str='\req_1'
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:39.43-41.18>
                            AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:40.17-40.35>
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:40.17-40.29> str='\fsm_function' in_lvalue
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:40.31-40.35> str='\GNT1'
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:41.24-43.18>
                            AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:42.17-42.36>
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:42.17-42.29> str='\fsm_function' in_lvalue
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:42.32-42.36> str='\IDLE'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:44.4-48.18>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) range=[2:0] int=2
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_CASE <tests/simple_tests/fsm_using_function/dut.v:44.11-48.18>
                AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_EQ <tests/simple_tests/fsm_using_function/dut.v:44.15-44.28>
                    AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:44.15-44.20> str='\req_0'
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:44.30-46.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:45.17-45.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:45.17-45.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:45.32-45.36> str='\GNT0'
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:46.24-48.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:47.17-47.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:47.17-47.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:47.32-47.36> str='\IDLE'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:49.4-53.18>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) range=[2:0] int=4
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_CASE <tests/simple_tests/fsm_using_function/dut.v:49.11-53.18>
                AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_EQ <tests/simple_tests/fsm_using_function/dut.v:49.15-49.28>
                    AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:49.15-49.20> str='\req_1'
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:49.30-51.14>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:50.17-50.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:50.17-50.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:50.32-50.36> str='\GNT1'
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:51.20-53.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:52.17-52.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:52.17-52.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:52.32-52.36> str='\IDLE'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:54.4-54.34>
            AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:54.14-54.33>
                AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:54.14-54.26> str='\fsm_function' in_lvalue
                AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:54.29-54.33> str='\IDLE'
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:24.11-24.19> str='\SIZE' dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000011'(32) range=[31:0] int=3 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:25.11-25.25> str='\IDLE' dimensions=[2:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) range=[2:0] int=1 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:25.26-25.39> str='\GNT0' dimensions=[2:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) range=[2:0] int=2 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:25.40-25.53> str='\GNT1' dimensions=[2:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) range=[2:0] int=4 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.9-20.14> str='\clock' input logic port=7 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.15-20.20> str='\reset' input logic port=8 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.21-20.26> str='\req_0' input logic port=9 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.27-20.32> str='\req_1' input logic port=10 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:22.9-22.14> str='\gnt_0' output reg port=11 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:22.15-22.20> str='\gnt_1' output reg port=12 dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:27.27-27.32> str='\state' reg
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:27.7-27.17> in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:28.27-28.37> str='\next_state' logic
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:28.7-28.17> in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/fsm_using_function/dut.v:67.1-93.4>
        AST_POSEDGE <tests/simple_tests/fsm_using_function/dut.v:67.11-67.24>
          AST_CAST_SIZE <tests/simple_tests/fsm_using_function/dut.v:67.11-67.24>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:67.19-67.24> str='\clock'
        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:67.8-67.25>
          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:68.9-68.21> str='\OUTPUT_LOGIC'
            AST_CASE <tests/simple_tests/fsm_using_function/dut.v:69.1-92.4>
              AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_EQ <tests/simple_tests/fsm_using_function/dut.v:69.5-69.18>
                  AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:69.5-69.10> str='\reset'
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:69.20-72.4>
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:70.3-70.19>
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:70.3-70.8> str='\gnt_0' in_lvalue
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:71.3-71.19>
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:71.3-71.8> str='\gnt_1' in_lvalue
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:73.6-92.4>
                    AST_CASE <tests/simple_tests/fsm_using_function/dut.v:74.3-91.10>
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:74.8-74.13> str='\state'
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:75.5-78.19>
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) range=[2:0] int=1
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:75.12-78.19>
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:76.19-76.35>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:76.19-76.24> str='\gnt_0' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:77.19-77.35>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:77.19-77.24> str='\gnt_1' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:79.4-82.20>
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) range=[2:0] int=2
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:79.11-82.20>
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:80.20-80.36>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:80.20-80.25> str='\gnt_0' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:81.20-81.36>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:81.20-81.25> str='\gnt_1' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:83.4-86.20>
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) range=[2:0] int=4
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:83.11-86.20>
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:84.20-84.36>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:84.20-84.25> str='\gnt_0' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:85.20-85.36>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:85.20-85.25> str='\gnt_1' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:87.4-90.22>
                        AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:87.14-90.22>
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:88.21-88.37>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:88.21-88.26> str='\gnt_0' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:89.21-89.37>
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:89.21-89.26> str='\gnt_1' in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) range=[0:0]
      AST_ASSIGN <tests/simple_tests/fsm_using_function/dut.v:30.8-30.54>
        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.8-30.18> str='\next_state' in_lvalue
        AST_FCALL <tests/simple_tests/fsm_using_function/dut.v:30.21-30.54> str='\fsm_function'
          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.34-30.39> str='\state'
          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.41-30.46> str='\req_0'
          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.48-30.53> str='\req_1'
      AST_ALWAYS <tests/simple_tests/fsm_using_function/dut.v:58.1-65.4>
        AST_POSEDGE <tests/simple_tests/fsm_using_function/dut.v:58.11-58.24>
          AST_CAST_SIZE <tests/simple_tests/fsm_using_function/dut.v:58.11-58.24>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:58.19-58.24> str='\clock'
        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:58.8-58.25>
          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:59.9-59.16> str='\FSM_SEQ'
            AST_CASE <tests/simple_tests/fsm_using_function/dut.v:60.3-64.6>
              AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_EQ <tests/simple_tests/fsm_using_function/dut.v:60.7-60.20>
                  AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:60.7-60.12> str='\reset'
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:60.22-62.6>
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:61.5-61.21>
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:61.5-61.10> str='\state' in_lvalue
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:61.17-61.21> str='\IDLE'
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:62.12-64.6>
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:63.5-63.27>
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:63.5-63.10> str='\state' in_lvalue
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:63.17-63.27> str='\next_state'
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module fsm_using_function(clock, reset, req_0, req_1, gnt_0, gnt_1);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      input [0:0] clock;
      input [0:0] reset;
      input [0:0] req_0;
      input [0:0] req_1;
      output reg [0:0] gnt_0;
      output reg [0:0] gnt_1;
      reg [2:0] state;
      wire [2:0] next_state;
      /** AST_FUNCTION **/
      always @(posedge 1'(clock))
        case (|((reset)==(1'b 1)))
          1'b 1:
            begin
              gnt_0 <= 1'b 0;
              gnt_1 <= 1'b 0;
            end
          default:
            case (state)
              3'b 001:
                begin
                  gnt_0 <= 1'b 0;
                  gnt_1 <= 1'b 0;
                end
              3'b 010:
                begin
                  gnt_0 <= 1'b 1;
                  gnt_1 <= 1'b 0;
                end
              3'b 100:
                begin
                  gnt_0 <= 1'b 0;
                  gnt_1 <= 1'b 1;
                end
              default:
                begin
                  gnt_0 <= 1'b 0;
                  gnt_1 <= 1'b 0;
                end
            endcase
        endcase
      assign next_state = /** AST_FCALL **/;
      always @(posedge 1'(clock))
        case (|((reset)==(1'b 1)))
          1'b 1:
            state <= IDLE;
          default:
            state <= next_state;
        endcase
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/fsm_using_function/dut.v:7.1-95.10> str='\fsm_using_function' basic_prep
      AST_FUNCTION <tests/simple_tests/fsm_using_function/dut.v:32.1-56.12> str='\fsm_function'
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> str='\fsm_function' logic
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> in_param
            AST_SUB <tests/simple_tests/fsm_using_function/dut.v:32.11-32.17> in_param
              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:32.11-32.15> str='\SIZE' in_param
              AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:33.22-33.27> str='\state' input logic port=4 dimensions=[2:0]
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:33.10-33.20> basic_prep range=[2:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:33.11-33.17> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:34.12-34.17> str='\req_0' input logic port=5 dimensions=[0:0]
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:35.12-35.17> str='\req_1' input logic port=6 dimensions=[0:0]
          AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
        AST_CASE <tests/simple_tests/fsm_using_function/dut.v:36.3-55.10>
          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:36.8-36.13> str='\state'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:37.4-43.18>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) range=[2:0] int=1
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_CASE <tests/simple_tests/fsm_using_function/dut.v:37.11-43.18>
                AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_EQ <tests/simple_tests/fsm_using_function/dut.v:37.15-37.28>
                    AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:37.15-37.20> str='\req_0'
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:37.30-39.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:38.17-38.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:38.17-38.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:38.32-38.36> str='\GNT0'
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_CASE <tests/simple_tests/fsm_using_function/dut.v:39.24-43.18>
                      AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_EQ <tests/simple_tests/fsm_using_function/dut.v:39.28-39.41>
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:39.28-39.33> str='\req_1'
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:39.43-41.18>
                            AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:40.17-40.35>
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:40.17-40.29> str='\fsm_function' in_lvalue
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:40.31-40.35> str='\GNT1'
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:41.24-43.18>
                            AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:42.17-42.36>
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:42.17-42.29> str='\fsm_function' in_lvalue
                              AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:42.32-42.36> str='\IDLE'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:44.4-48.18>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) range=[2:0] int=2
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_CASE <tests/simple_tests/fsm_using_function/dut.v:44.11-48.18>
                AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_EQ <tests/simple_tests/fsm_using_function/dut.v:44.15-44.28>
                    AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:44.15-44.20> str='\req_0'
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:44.30-46.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:45.17-45.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:45.17-45.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:45.32-45.36> str='\GNT0'
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:46.24-48.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:47.17-47.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:47.17-47.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:47.32-47.36> str='\IDLE'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:49.4-53.18>
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) range=[2:0] int=4
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_CASE <tests/simple_tests/fsm_using_function/dut.v:49.11-53.18>
                AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_EQ <tests/simple_tests/fsm_using_function/dut.v:49.15-49.28>
                    AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:49.15-49.20> str='\req_1'
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) range=[0:0] int=1
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:49.30-51.14>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:50.17-50.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:50.17-50.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:50.32-50.36> str='\GNT1'
                AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:51.20-53.18>
                      AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:52.17-52.36>
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:52.17-52.29> str='\fsm_function' in_lvalue
                        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:52.32-52.36> str='\IDLE'
          AST_COND <tests/simple_tests/fsm_using_function/dut.v:54.4-54.34>
            AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0>
              AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:54.14-54.33>
                AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:54.14-54.26> str='\fsm_function' in_lvalue
                AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:54.29-54.33> str='\IDLE'
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:24.11-24.19> str='\SIZE' basic_prep range=[31:0] dimensions=[31:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000011'(32) basic_prep range=[31:0] int=3 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:25.11-25.25> str='\IDLE' basic_prep range=[2:0] dimensions=[2:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:25.26-25.39> str='\GNT0' basic_prep range=[2:0] dimensions=[2:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) basic_prep range=[2:0] int=2 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/fsm_using_function/dut.v:25.40-25.53> str='\GNT1' basic_prep range=[2:0] dimensions=[2:0] in_param
        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) basic_prep range=[2:0] int=4 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) unsized basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) unsized basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.9-20.14> str='\clock' input logic basic_prep port=7 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.15-20.20> str='\reset' input logic basic_prep port=8 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.21-20.26> str='\req_0' input logic basic_prep port=9 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:20.27-20.32> str='\req_1' input logic basic_prep port=10 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:22.9-22.14> str='\gnt_0' output reg basic_prep port=11 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:22.15-22.20> str='\gnt_1' output reg basic_prep port=12 range=[0:0] dimensions=[0:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:27.27-27.32> str='\state' reg basic_prep range=[2:0] dimensions=[2:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:27.7-27.17> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:28.27-28.37> str='\next_state' logic basic_prep range=[2:0] dimensions=[2:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:28.7-28.17> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000010'(32) signed basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/fsm_using_function/dut.v:67.1-93.4> basic_prep
        AST_POSEDGE <tests/simple_tests/fsm_using_function/dut.v:67.11-67.24> basic_prep
          AST_CAST_SIZE <tests/simple_tests/fsm_using_function/dut.v:67.11-67.24> basic_prep
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:67.19-67.24> str='\clock' basic_prep
        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:67.8-67.25> basic_prep
          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:68.9-68.21> basic_prep
            AST_CASE <tests/simple_tests/fsm_using_function/dut.v:69.1-92.4> basic_prep
              AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_EQ <tests/simple_tests/fsm_using_function/dut.v:69.5-69.18> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:69.5-69.10> str='\reset' basic_prep
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:69.20-72.4> basic_prep
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:70.3-70.19> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:70.3-70.8> str='\gnt_0' basic_prep in_lvalue
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:71.3-71.19> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:71.3-71.8> str='\gnt_1' basic_prep in_lvalue
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:73.6-92.4> basic_prep
                    AST_CASE <tests/simple_tests/fsm_using_function/dut.v:74.3-91.10> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:74.8-74.13> str='\state' basic_prep
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:75.5-78.19> basic_prep
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:75.12-78.19> basic_prep
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:76.19-76.35> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:76.19-76.24> str='\gnt_0' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:77.19-77.35> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:77.19-77.24> str='\gnt_1' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:79.4-82.20> basic_prep
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) basic_prep range=[2:0] int=2
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:79.11-82.20> basic_prep
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:80.20-80.36> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:80.20-80.25> str='\gnt_0' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:81.20-81.36> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:81.20-81.25> str='\gnt_1' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:83.4-86.20> basic_prep
                        AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) basic_prep range=[2:0] int=4
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:83.11-86.20> basic_prep
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:84.20-84.36> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:84.20-84.25> str='\gnt_0' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:85.20-85.36> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:85.20-85.25> str='\gnt_1' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                      AST_COND <tests/simple_tests/fsm_using_function/dut.v:87.4-90.22> basic_prep
                        AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:87.14-90.22> basic_prep
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:88.21-88.37> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:88.21-88.26> str='\gnt_0' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
                          AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:89.21-89.37> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:89.21-89.26> str='\gnt_1' basic_prep in_lvalue
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='0'(1) basic_prep range=[0:0]
      AST_ASSIGN <tests/simple_tests/fsm_using_function/dut.v:30.8-30.54> basic_prep
        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.8-30.18> str='\next_state' basic_prep in_lvalue
        AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.21-30.54> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result' basic_prep
      AST_ALWAYS <tests/simple_tests/fsm_using_function/dut.v:58.1-65.4> basic_prep
        AST_POSEDGE <tests/simple_tests/fsm_using_function/dut.v:58.11-58.24> basic_prep
          AST_CAST_SIZE <tests/simple_tests/fsm_using_function/dut.v:58.11-58.24> basic_prep
            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:58.19-58.24> str='\clock' basic_prep
        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:58.8-58.25> basic_prep
          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:59.9-59.16> basic_prep
            AST_CASE <tests/simple_tests/fsm_using_function/dut.v:60.3-64.6> basic_prep
              AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_EQ <tests/simple_tests/fsm_using_function/dut.v:60.7-60.20> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:60.7-60.12> str='\reset' basic_prep
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:60.22-62.6> basic_prep
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:61.5-61.21> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:61.5-61.10> str='\state' basic_prep in_lvalue
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:61.17-61.21> bits='001'(3) basic_prep range=[2:0] int=1
              AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                  AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:62.12-64.6> basic_prep
                    AST_ASSIGN_LE <tests/simple_tests/fsm_using_function/dut.v:63.5-63.27> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:63.5-63.10> str='\state' basic_prep in_lvalue
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:63.17-63.27> str='\next_state' basic_prep
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result' logic reg basic_prep range=[2:0] dimensions=[2:0]
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:32.11-32.17> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
        AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
          AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state' basic_prep in_lvalue
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.34-30.39> str='\state' basic_prep
          AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0' basic_prep in_lvalue
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.41-30.46> str='\req_0' basic_prep
          AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1' basic_prep in_lvalue
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.48-30.53> str='\req_1' basic_prep
          AST_CASE <tests/simple_tests/fsm_using_function/dut.v:36.3-55.10> basic_prep
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:36.8-36.13> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state' basic_prep
            AST_COND <tests/simple_tests/fsm_using_function/dut.v:37.4-43.18> basic_prep
              AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='001'(3) basic_prep range=[2:0] int=1
              AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_CASE <tests/simple_tests/fsm_using_function/dut.v:37.11-43.18> basic_prep
                  AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_EQ <tests/simple_tests/fsm_using_function/dut.v:37.15-37.28> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:37.15-37.20> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0' basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                      AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:37.30-39.18> basic_prep
                        AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:38.17-38.36> basic_prep
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:38.17-38.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:38.32-38.36> bits='010'(3) basic_prep range=[2:0] int=2
                  AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                      AST_CASE <tests/simple_tests/fsm_using_function/dut.v:39.24-43.18> basic_prep
                        AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                          AST_EQ <tests/simple_tests/fsm_using_function/dut.v:39.28-39.41> basic_prep
                            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:39.28-39.33> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1' basic_prep
                            AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                        AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:39.43-41.18> basic_prep
                              AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:40.17-40.35> basic_prep
                                AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:40.17-40.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                                AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:40.31-40.35> bits='100'(3) basic_prep range=[2:0] int=4
                        AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                          AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                          AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                            AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:41.24-43.18> basic_prep
                              AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:42.17-42.36> basic_prep
                                AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:42.17-42.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                                AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:42.32-42.36> bits='001'(3) basic_prep range=[2:0] int=1
            AST_COND <tests/simple_tests/fsm_using_function/dut.v:44.4-48.18> basic_prep
              AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='010'(3) basic_prep range=[2:0] int=2
              AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_CASE <tests/simple_tests/fsm_using_function/dut.v:44.11-48.18> basic_prep
                  AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_EQ <tests/simple_tests/fsm_using_function/dut.v:44.15-44.28> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:44.15-44.20> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0' basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                      AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:44.30-46.18> basic_prep
                        AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:45.17-45.36> basic_prep
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:45.17-45.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:45.32-45.36> bits='010'(3) basic_prep range=[2:0] int=2
                  AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                      AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:46.24-48.18> basic_prep
                        AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:47.17-47.36> basic_prep
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:47.17-47.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:47.32-47.36> bits='001'(3) basic_prep range=[2:0] int=1
            AST_COND <tests/simple_tests/fsm_using_function/dut.v:49.4-53.18> basic_prep
              AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='100'(3) basic_prep range=[2:0] int=4
              AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_CASE <tests/simple_tests/fsm_using_function/dut.v:49.11-53.18> basic_prep
                  AST_REDUCE_BOOL <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_EQ <tests/simple_tests/fsm_using_function/dut.v:49.15-49.28> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:49.15-49.20> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1' basic_prep
                      AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                      AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:49.30-51.14> basic_prep
                        AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:50.17-50.36> basic_prep
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:50.17-50.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:50.32-50.36> bits='100'(3) basic_prep range=[2:0] int=4
                  AST_COND <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                    AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                      AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:51.20-53.18> basic_prep
                        AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:52.17-52.36> basic_prep
                          AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:52.17-52.29> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:52.32-52.36> bits='001'(3) basic_prep range=[2:0] int=1
            AST_COND <tests/simple_tests/fsm_using_function/dut.v:54.4-54.34> basic_prep
              AST_DEFAULT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
              AST_BLOCK <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
                AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:54.14-54.33> basic_prep
                  AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:54.14-54.26> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep in_lvalue
                  AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:54.29-54.33> bits='001'(3) basic_prep range=[2:0] int=1
          AST_ASSIGN_EQ <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result' basic_prep in_lvalue
            AST_IDENTIFIER <tests/simple_tests/fsm_using_function/dut.v:30.21-30.54> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' basic_prep
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' logic reg basic_prep range=[2:0] dimensions=[2:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:32.10-32.20> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:32.11-32.17> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:33.22-33.27> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state' logic reg basic_prep range=[2:0] dimensions=[2:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:33.10-33.20> basic_prep range=[2:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:33.11-33.17> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:34.12-34.17> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0' logic reg basic_prep range=[0:0] dimensions=[0:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/fsm_using_function/dut.v:35.12-35.17> str='\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1' logic reg basic_prep range=[0:0] dimensions=[0:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/fsm_using_function/dut.v:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module fsm_using_function(clock, reset, req_0, req_1, gnt_0, gnt_1);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      input [0:0] clock;
      input [0:0] reset;
      input [0:0] req_0;
      input [0:0] req_1;
      output reg [0:0] gnt_0;
      output reg [0:0] gnt_1;
      reg [2:0] state;
      wire [2:0] next_state;
      reg [2:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result ;
      (* nosync = 1 *)
      reg [2:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result ;
      (* nosync = 1 *)
      reg [2:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state ;
      (* nosync = 1 *)
      reg [0:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0 ;
      (* nosync = 1 *)
      reg [0:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1 ;
      /** AST_FUNCTION **/
      always @(posedge 1'(clock))
        case (|((reset)==(1'b 1)))
          1'b 1:
            begin
              gnt_0 <= 1'b 0;
              gnt_1 <= 1'b 0;
            end
          default:
            case (state)
              3'b 001:
                begin
                  gnt_0 <= 1'b 0;
                  gnt_1 <= 1'b 0;
                end
              3'b 010:
                begin
                  gnt_0 <= 1'b 1;
                  gnt_1 <= 1'b 0;
                end
              3'b 100:
                begin
                  gnt_0 <= 1'b 0;
                  gnt_1 <= 1'b 1;
                end
              default:
                begin
                  gnt_0 <= 1'b 0;
                  gnt_1 <= 1'b 0;
                end
            endcase
        endcase
      assign next_state = \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result ;
      always @(posedge 1'(clock))
        case (|((reset)==(1'b 1)))
          1'b 1:
            state <= 3'b 001;
          default:
            state <= next_state;
        endcase
      always @*
        begin
          \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state  = state;
          \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0  = req_0;
          \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1  = req_1;
          case (\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state )
            3'b 001:
              case (|((\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0 )==(1'b 1)))
                1'b 1:
                  \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 010;
                default:
                  case (|((\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1 )==(1'b 1)))
                    1'b 1:
                      \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 100;
                    default:
                      \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 001;
                  endcase
              endcase
            3'b 010:
              case (|((\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0 )==(1'b 1)))
                1'b 1:
                  \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 010;
                default:
                  \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 001;
              endcase
            3'b 100:
              case (|((\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1 )==(1'b 1)))
                1'b 1:
                  \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 100;
                default:
                  \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 001;
              endcase
            default:
              \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result  = 3'b 001;
          endcase
          \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result  = \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result ;
        end
    endmodule
--- END OF AST DUMP ---

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \fsm_using_function

2.1.2. Analyzing design hierarchy..
Top module:  \fsm_using_function
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$tests/simple_tests/fsm_using_function/dut.v:0$7 in module fsm_using_function.
Marked 1 switch rules as full_case in process $proc$tests/simple_tests/fsm_using_function/dut.v:58$5 in module fsm_using_function.
Marked 2 switch rules as full_case in process $proc$tests/simple_tests/fsm_using_function/dut.v:67$3 in module fsm_using_function.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 5 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~8 debug messages>

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
     1/5: $5\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result[2:0]$21
     2/5: $4\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result[2:0]$19
     3/5: $3\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result[2:0]$17
     4/5: $2\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result[2:0]$15
     5/5: $1\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result[2:0]$13
Creating decoders for process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:58$5'.
     1/1: $0\state[2:0]
Creating decoders for process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:67$3'.
     1/2: $0\gnt_1[0:0]
     2/2: $0\gnt_0[0:0]

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fsm_using_function.\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result' from process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
No latch inferred for signal `\fsm_using_function.\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0' from process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
No latch inferred for signal `\fsm_using_function.\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state' from process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
No latch inferred for signal `\fsm_using_function.\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result' from process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
No latch inferred for signal `\fsm_using_function.\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1' from process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fsm_using_function.\state' using process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:58$5'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\fsm_using_function.\gnt_0' using process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:67$3'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\fsm_using_function.\gnt_1' using process `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:67$3'.
  created $dff cell `$procdff$77' with positive edge clock.

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
Removing empty process `fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:0$7'.
Found and cleaned up 1 empty switch in `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:58$5'.
Removing empty process `fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:58$5'.
Found and cleaned up 2 empty switches in `\fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:67$3'.
Removing empty process `fsm_using_function.$proc$tests/simple_tests/fsm_using_function/dut.v:67$3'.
Cleaned up 8 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_function.
<suppressed ~6 debug messages>

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_function.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_function..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module fsm_using_function...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_function.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_function'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_using_function..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$33.
    dead port 1/2 on $mux $procmux$42.
    dead port 2/2 on $mux $procmux$44.
    dead port 2/2 on $mux $procmux$52.
    dead port 2/2 on $mux $procmux$26.
Removed 5 multiplexer ports.
<suppressed ~3 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_using_function.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_function'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_function..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_function.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsm_using_function..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsm_using_function.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_function'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_function..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_function.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from mux cell fsm_using_function.$procmux$31 ($mux).
Removed top 1 bits (of 3) from port B of cell fsm_using_function.$procmux$34_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell fsm_using_function.$procmux$45_CMP0 ($eq).
Removed top 1 bits (of 3) from wire fsm_using_function.$4\fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.$result[2:0]$19.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_function..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_using_function.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsm_using_function'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsm_using_function..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== fsm_using_function ===

   Number of wires:                 23
   Number of wire bits:             38
   Number of public wires:          12
   Number of public wire bits:      20
   Number of ports:                  6
   Number of port bits:              6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $dff                            3
     $eq                             3
     $mux                            8
     $pmux                           1

2.13. Executing CHECK pass (checking for obvious problems).
Checking module fsm_using_function...
Found and reported 0 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Synlig (git sha1 c4fc1e288, clang++-15 15.0.6 -Og -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\fsm_using_function'.

(* top =  1  *)
(* src = "tests/simple_tests/fsm_using_function/dut.v:7.1-95.10" *)
module fsm_using_function(clock, reset, req_0, req_1, gnt_0, gnt_1);
  (* src = "tests/simple_tests/fsm_using_function/dut.v:67.1-93.4" *)
  wire _00_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:67.1-93.4" *)
  wire _01_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:58.1-65.4" *)
  wire [2:0] _02_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0" *)
  wire [2:0] _03_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0" *)
  wire [2:0] _04_;
  wire [1:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:20.9-20.14" *)
  input clock;
  wire clock;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:32.10-32.20" *)
  wire [2:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result ;
  (* nosync = 32'd1 *)
  (* src = "tests/simple_tests/fsm_using_function/dut.v:34.12-34.17" *)
  wire \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0 ;
  (* nosync = 32'd1 *)
  (* src = "tests/simple_tests/fsm_using_function/dut.v:35.12-35.17" *)
  wire \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1 ;
  (* nosync = 32'd1 *)
  (* src = "tests/simple_tests/fsm_using_function/dut.v:33.22-33.27" *)
  wire [2:0] \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state ;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:22.9-22.14" *)
  output gnt_0;
  reg gnt_0;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:22.15-22.20" *)
  output gnt_1;
  reg gnt_1;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:28.27-28.37" *)
  wire [2:0] next_state;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:20.21-20.26" *)
  input req_0;
  wire req_0;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:20.27-20.32" *)
  input req_1;
  wire req_1;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:20.15-20.20" *)
  input reset;
  wire reset;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:27.27-27.32" *)
  reg [2:0] state;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:58.1-65.4" *)
  always @(posedge clock)
    state <= _02_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:67.1-93.4" *)
  always @(posedge clock)
    gnt_0 <= _00_;
  (* src = "tests/simple_tests/fsm_using_function/dut.v:67.1-93.4" *)
  always @(posedge clock)
    gnt_1 <= _01_;
  assign _06_ = state == (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:49.4-53.18|tests/simple_tests/fsm_using_function/dut.v:36.3-55.10" *) 3'h4;
  assign _05_ = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0|tests/simple_tests/fsm_using_function/dut.v:44.11-48.18" *) 2'h2 : 2'h1;
  assign _07_ = state == (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:44.4-48.18|tests/simple_tests/fsm_using_function/dut.v:36.3-55.10" *) 2'h2;
  assign _04_ = req_1 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0|tests/simple_tests/fsm_using_function/dut.v:39.24-43.18" *) 3'h4 : 3'h1;
  assign _08_ = state == (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:37.4-43.18|tests/simple_tests/fsm_using_function/dut.v:36.3-55.10" *) 1'h1;
  assign _03_ = req_0 ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0|tests/simple_tests/fsm_using_function/dut.v:37.11-43.18" *) 3'h2 : _04_;
  function [2:0] _20_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "tests/simple_tests/fsm_using_function/dut.v:49.4-53.18|tests/simple_tests/fsm_using_function/dut.v:36.3-55.10" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _20_ = b[2:0];
      3'b?1?:
        _20_ = b[5:3];
      3'b1??:
        _20_ = b[8:6];
      default:
        _20_ = a;
    endcase
  endfunction
  assign \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result  = _20_(3'h1, { _03_, 1'h0, _05_, _04_ }, { _08_, _07_, _06_ });
  assign _02_ = reset ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0|tests/simple_tests/fsm_using_function/dut.v:60.3-64.6" *) 3'h1 : \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result ;
  assign _09_ = _06_ ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:83.4-86.20|tests/simple_tests/fsm_using_function/dut.v:74.3-91.10" *) 1'h1 : 1'h0;
  assign _01_ = reset ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0|tests/simple_tests/fsm_using_function/dut.v:69.1-92.4" *) 1'h0 : _09_;
  assign _10_ = _07_ ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:79.4-82.20|tests/simple_tests/fsm_using_function/dut.v:74.3-91.10" *) 1'h1 : 1'h0;
  assign _00_ = reset ? (* full_case = 32'd1 *) (* src = "tests/simple_tests/fsm_using_function/dut.v:0.0-0.0|tests/simple_tests/fsm_using_function/dut.v:69.1-92.4" *) 1'h0 : _10_;
  assign \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_0  = 1'hx;
  assign \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.req_1  = 1'hx;
  assign \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$2.state  = 3'hx;
  assign next_state = \fsm_function$func$tests/simple_tests/fsm_using_function/dut.v:30$1.$result ;
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\fsm_using_function'.

5. Executing SIM pass (simulate the circuit).
Simulating cycle 0.
Simulating cycle 1.
Simulating cycle 2.
Simulating cycle 3.
Simulating cycle 4.
Simulating cycle 5.
Simulating cycle 6.
Simulating cycle 7.
Simulating cycle 8.
Simulating cycle 9.
Simulating cycle 10.
Simulating cycle 11.
Simulating cycle 12.
Simulating cycle 13.
Simulating cycle 14.
Simulating cycle 15.
Simulating cycle 16.
Simulating cycle 17.
Simulating cycle 18.
Simulating cycle 19.
Simulating cycle 20.
Simulating cycle 21.
Simulating cycle 22.
Simulating cycle 23.
Simulating cycle 24.
Simulating cycle 25.
Simulating cycle 26.
Simulating cycle 27.
Simulating cycle 28.
Simulating cycle 29.
Simulating cycle 30.
Simulating cycle 31.
Simulating cycle 32.
Simulating cycle 33.
Simulating cycle 34.
Simulating cycle 35.
Simulating cycle 36.
Simulating cycle 37.
Simulating cycle 38.
Simulating cycle 39.
Simulating cycle 40.

