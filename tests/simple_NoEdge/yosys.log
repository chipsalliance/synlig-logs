1. Executing Verilog with UHDM frontend.
[INF:CM0023] Creating log file "tests/build/slpp_all/surelog.log".
[INF:CP0300] Compilation...
[INF:CP0303] tests/simple_tests/NoEdge/dut.sv:1:1: Compile module "work@dut".
[INF:CP0302] Compile class "work@mailbox".
[INF:CP0302] Compile class "work@process".
[INF:CP0302] Compile class "work@semaphore".
[INF:EL0526] Design Elaboration...
[NTE:EL0503] tests/simple_tests/NoEdge/dut.sv:1:1: Top level module "work@dut".
[NTE:EL0508] Nb Top level modules: 1.
[NTE:EL0509] Max instance depth: 1.
[NTE:EL0510] Nb instances: 1.
[NTE:EL0511] Nb leaf instances: 0.
[INF:UH0706] Creating UHDM Model...
[INF:UH0707] Elaborating UHDM...
[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 0
[WARNING] : 0
[   NOTE] : 5
Object 'work@dut' of type 'design'
  Object 'builtin' of type 'package'
  Object '' of type 'module_inst'
    Object 'DEPTH' of type 'parameter'
    Object 'DEPTH_BITS' of type 'parameter'
    Object '' of type 'param_assign'
      Object 'DEPTH' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'DEPTH_BITS' of type 'parameter'
      Object '' of type 'constant'
    Object 'ptr_in' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'operation'
            Object 'DEPTH_BITS' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'clk' of type 'logic_net'
    Object 'fifo_push' of type 'logic_net'
    Object 'fullness_in' of type 'logic_net'
    Object '' of type 'always'
      Object '' of type 'event_control'
        Object '' of type 'operation'
          Object 'fifo_push' of type 'ref_obj'
          Object 'ptr_in' of type 'ref_obj'
        Object '' of type 'begin'
          Object '' of type 'assignment'
            Object 'fullness_in' of type 'ref_obj'
            Object '' of type 'constant'
          Object '' of type 'assignment'
            Object 'fullness_in' of type 'bit_select'
              Object 'ptr_in' of type 'ref_obj'
            Object 'fifo_push' of type 'ref_obj'
  Object 'work@dut' of type 'module_inst'
    Object 'DEPTH' of type 'parameter'
    Object 'DEPTH_BITS' of type 'parameter'
    Object '' of type 'param_assign'
      Object 'DEPTH' of type 'parameter'
      Object '' of type 'constant'
    Object '' of type 'param_assign'
      Object 'DEPTH_BITS' of type 'parameter'
      Object '' of type 'constant'
    Object 'clk' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'fifo_push' of type 'port'
      Object '' of type 'logic_typespec'
    Object 'fullness_in' of type 'port'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'ptr_in' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
    Object 'clk' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'fifo_push' of type 'logic_net'
      Object '' of type 'logic_typespec'
    Object 'fullness_in' of type 'logic_net'
      Object '' of type 'logic_typespec'
        Object '' of type 'range'
          Object '' of type 'constant'
          Object '' of type 'constant'
Generating RTLIL representation for module `\dut'.
Dumping AST before simplification:
    AST_MODULE <tests/simple_tests/NoEdge/dut.sv:1.1-16.10> str='\dut'
      AST_PARAMETER <tests/simple_tests/NoEdge/dut.sv:2.28-2.42> str='\DEPTH' multirange=[ 0 32 ] multirange_swapped=[ 0 ] in_param
        AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000100'(32) range=[31:0] int=4 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/NoEdge/dut.sv:3.28-3.42> str='\DEPTH_BITS' multirange=[ 0 32 ] multirange_swapped=[ 0 ] in_param
        AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) range=[31:0] int=2 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:8.31-8.37> str='\ptr_in' reg
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:8.8-8.24> in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:1.12-1.15> str='\clk' input logic port=1 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:1.17-1.26> str='\fifo_push' input logic port=2 multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:1.28-1.39> str='\fullness_in' output reg port=3 multirange=[ 0 4 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:7.15-7.26> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/NoEdge/dut.sv:10.4-14.9>
        AST_EDGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0>
          AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:10.26-10.35> str='\fifo_push'
        AST_EDGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0>
          AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:10.39-10.45> str='\ptr_in'
        AST_BLOCK <tests/simple_tests/NoEdge/dut.sv:10.11-10.46>
          AST_BLOCK <tests/simple_tests/NoEdge/dut.sv:11.6-14.9>
            AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:12.5-12.23>
              AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:12.5-12.16> str='\fullness_in' in_lvalue
              AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='0000'(4) range=[3:0]
            AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:13.5-13.36>
              AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.5-13.24> str='\fullness_in' in_lvalue
                AST_RANGE <tests/simple_tests/NoEdge/dut.sv:13.5-13.24> in_lvalue
                  AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.17-13.23> str='\ptr_in' in_lvalue
              AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.27-13.36> str='\fifo_push'
--- END OF AST DUMP ---
Dumping Verilog AST before simplification:
    module dut(clk, fifo_push, fullness_in);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      reg [1:0] ptr_in;
      input [0:0] clk;
      input [0:0] fifo_push;
      output reg [3:0] fullness_in;
      always @(fifo_push, ptr_in)
        begin
          fullness_in = 4'b 0000;
          fullness_in[ptr_in] = fifo_push;
        end
    endmodule
--- END OF AST DUMP ---
Dumping AST after simplification:
    AST_MODULE <tests/simple_tests/NoEdge/dut.sv:1.1-16.10> str='\dut' basic_prep
      AST_PARAMETER <tests/simple_tests/NoEdge/dut.sv:2.28-2.42> str='\DEPTH' basic_prep range=[31:0] multirange=[ 0 32 ] multirange_swapped=[ 0 ] in_param
        AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000100'(32) basic_prep range=[31:0] int=4 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_PARAMETER <tests/simple_tests/NoEdge/dut.sv:3.28-3.42> str='\DEPTH_BITS' basic_prep range=[31:0] multirange=[ 0 32 ] multirange_swapped=[ 0 ] in_param
        AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000010'(32) basic_prep range=[31:0] int=2 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000011111'(32) signed basic_prep range=[31:0] int=31 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:8.31-8.37> str='\ptr_in' reg basic_prep range=[1:0]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:8.8-8.24> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:1.12-1.15> str='\clk' input logic basic_prep port=1 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:1.17-1.26> str='\fifo_push' input logic basic_prep port=2 range=[0:0] multirange=[ 0 1 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[0:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:1.28-1.39> str='\fullness_in' output reg basic_prep port=3 range=[3:0] multirange=[ 0 4 ] multirange_swapped=[ 0 ]
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:7.15-7.26> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_ALWAYS <tests/simple_tests/NoEdge/dut.sv:10.4-14.9> basic_prep
        AST_EDGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
          AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:10.26-10.35> str='\fifo_push' basic_prep
        AST_EDGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
          AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:10.39-10.45> str='\ptr_in' basic_prep
        AST_BLOCK <tests/simple_tests/NoEdge/dut.sv:10.11-10.46> basic_prep
          AST_BLOCK <tests/simple_tests/NoEdge/dut.sv:11.6-14.9> basic_prep
            AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:12.5-12.23> basic_prep
              AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:12.5-12.16> str='\fullness_in' basic_prep in_lvalue
              AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='0000'(4) basic_prep range=[3:0]
            AST_BLOCK <tests/simple_tests/NoEdge/dut.sv:13.5-13.36> basic_prep
              AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3' basic_prep in_lvalue
                AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.17-13.23> str='\ptr_in' basic_prep
              AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1' basic_prep in_lvalue
                AST_SHIFT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                  AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                  AST_NEG <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                    AST_SUB <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                      AST_TO_SIGNED <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                        AST_CAST_SIZE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3
                          AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3' basic_prep
                      AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
              AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2' basic_prep in_lvalue
                AST_SHIFT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                  AST_BIT_AND <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                    AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='1'(1) basic_prep range=[0:0] int=1
                    AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.27-13.36> str='\fifo_push' basic_prep
                  AST_NEG <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                    AST_SUB <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                      AST_TO_SIGNED <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                        AST_CAST_SIZE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3
                          AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3' basic_prep
                      AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0]
              AST_ASSIGN_EQ <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.5-13.24> str='\fullness_in' basic_prep in_lvalue
                AST_BIT_OR <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                  AST_BIT_AND <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                    AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:13.5-13.24> str='\fullness_in' basic_prep
                    AST_BIT_NOT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep
                      AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1' basic_prep
                  AST_IDENTIFIER <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2' basic_prep
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1' logic basic_prep range=[3:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2' logic basic_prep range=[3:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[3:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000011'(32) signed basic_prep range=[31:0] int=3 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
      AST_WIRE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> str='$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3' logic basic_prep range=[1:0]
        ATTR \nosync:
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) basic_prep range=[31:0] int=1 in_param
        AST_RANGE <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> basic_prep range=[1:0] in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000001'(32) signed basic_prep range=[31:0] int=1 in_param
          AST_CONSTANT <tests/simple_tests/NoEdge/dut.sv:0.0-0.0> bits='00000000000000000000000000000000'(32) signed basic_prep range=[31:0] in_param
--- END OF AST DUMP ---
Dumping Verilog AST after simplification:
    module dut(clk, fifo_push, fullness_in);
      /** AST_PARAMETER **/
      /** AST_PARAMETER **/
      reg [1:0] ptr_in;
      input [0:0] clk;
      input [0:0] fifo_push;
      output reg [3:0] fullness_in;
      (* nosync = 1 *)
      wire [3:0] \$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1 ;
      (* nosync = 1 *)
      wire [3:0] \$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2 ;
      (* nosync = 1 *)
      wire [1:0] \$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3 ;
      always @(fifo_push, ptr_in)
        begin
          fullness_in = 4'b 0000;
          begin
            \$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3  = ptr_in;
            \$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1  = (1'b 1)@shift@(-((signed'(3'(\$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3 )))-(0)));
            \$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2  = ((1'b 1)&(fifo_push))@shift@(-((signed'(3'(\$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3 )))-(0)));
            fullness_in = ((fullness_in)&(~(\$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1 )))|(\$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2 );
          end
        end
    endmodule
--- END OF AST DUMP ---
Note: Assuming pure combinatorial block at tests/simple_tests/NoEdge/dut.sv:10.4-14.9 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \dut

2.1.2. Analyzing design hierarchy..
Top module:  \dut
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dut.$proc$tests/simple_tests/NoEdge/dut.sv:10$4'.

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dut.\fullness_in' from process `\dut.$proc$tests/simple_tests/NoEdge/dut.sv:10$4'.
No latch inferred for signal `\dut.$bitselwrite$mask$tests/simple_tests/NoEdge/dut.sv:13$1' from process `\dut.$proc$tests/simple_tests/NoEdge/dut.sv:10$4'.
No latch inferred for signal `\dut.$bitselwrite$data$tests/simple_tests/NoEdge/dut.sv:13$2' from process `\dut.$proc$tests/simple_tests/NoEdge/dut.sv:10$4'.
No latch inferred for signal `\dut.$bitselwrite$sel$tests/simple_tests/NoEdge/dut.sv:13$3' from process `\dut.$proc$tests/simple_tests/NoEdge/dut.sv:10$4'.

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `dut.$proc$tests/simple_tests/NoEdge/dut.sv:10$4'.
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.
<suppressed ~3 debug messages>

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..
Removed 4 unused cells and 15 unused wires.
<suppressed ~5 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Warning: Wire dut.\ptr_in [1] is used but has no driver.
Warning: Wire dut.\ptr_in [0] is used but has no driver.
Found and reported 2 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dut.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port A of cell dut.$sub$tests/simple_tests/NoEdge/dut.sv:0$12 ($sub).
Removed top 31 bits (of 32) from port B of cell dut.$sub$tests/simple_tests/NoEdge/dut.sv:0$12 ($sub).
Converting cell dut.$sub$tests/simple_tests/NoEdge/dut.sv:0$12 ($sub) from signed to unsigned.
Removed top 28 bits (of 32) from port Y of cell dut.$sub$tests/simple_tests/NoEdge/dut.sv:0$12 ($sub).
Removed top 1 bits (of 3) from port A of cell dut.$sub$tests/simple_tests/NoEdge/dut.sv:0$12 ($sub).
Removed top 1 bits (of 4) from port Y of cell dut.$sub$tests/simple_tests/NoEdge/dut.sv:0$12 ($sub).
Removed top 29 bits (of 32) from port A of cell dut.$neg$tests/simple_tests/NoEdge/dut.sv:0$13 ($neg).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== dut ===

   Number of wires:                  6
   Number of wire bits:             72
   Number of public wires:           4
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $neg                            1
     $shift                          1
     $sub                            1

2.13. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Warning: Wire dut.\ptr_in [1] is used but has no driver.
Warning: Wire dut.\ptr_in [0] is used but has no driver.
Found and reported 2 problems.

3. Executing Verilog backend.

3.1. Executing BMUXMAP pass.

3.2. Executing DEMUXMAP pass.
/* Generated by Yosys 0.36+61 (git sha1 df65634e0, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address) */
Dumping module `\dut'.

(* top =  1  *)
(* src = "tests/simple_tests/NoEdge/dut.sv:1.1-16.10" *)
module dut(clk, fifo_push, fullness_in);
  (* src = "tests/simple_tests/NoEdge/dut.sv:0.0-0.0" *)
  wire [31:0] _0_;
  (* src = "tests/simple_tests/NoEdge/dut.sv:0.0-0.0" *)
  wire [31:0] _1_;
  (* src = "tests/simple_tests/NoEdge/dut.sv:1.12-1.15" *)
  input clk;
  wire clk;
  (* src = "tests/simple_tests/NoEdge/dut.sv:1.17-1.26" *)
  input fifo_push;
  wire fifo_push;
  (* src = "tests/simple_tests/NoEdge/dut.sv:1.28-1.39" *)
  output [3:0] fullness_in;
  wire [3:0] fullness_in;
  (* src = "tests/simple_tests/NoEdge/dut.sv:8.31-8.37" *)
  wire [1:0] ptr_in;
  assign _0_ = - (* src = "tests/simple_tests/NoEdge/dut.sv:0.0-0.0" *) $signed({ _1_[31], _1_[1:0] });
  assign fullness_in = $signed(_0_) < 0 ? fifo_push << - _0_ : fifo_push >> _0_;
  assign { _1_[31], _1_[1:0] } = ptr_in - (* src = "tests/simple_tests/NoEdge/dut.sv:0.0-0.0" *) 1'h0;
  assign _1_[30:2] = { _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31], _1_[31] };
endmodule

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\dut'.

5. Executing SIM pass (simulate the circuit).
Simulating cycle 0.
Simulating cycle 1.
Simulating cycle 2.
Simulating cycle 3.
Simulating cycle 4.
Simulating cycle 5.
Simulating cycle 6.
Simulating cycle 7.
Simulating cycle 8.
Simulating cycle 9.
Simulating cycle 10.
Simulating cycle 11.
Simulating cycle 12.
Simulating cycle 13.
Simulating cycle 14.
Simulating cycle 15.
Simulating cycle 16.
Simulating cycle 17.
Simulating cycle 18.
Simulating cycle 19.
Simulating cycle 20.
Simulating cycle 21.
Simulating cycle 22.
Simulating cycle 23.
Simulating cycle 24.
Simulating cycle 25.
Simulating cycle 26.
Simulating cycle 27.
Simulating cycle 28.
Simulating cycle 29.
Simulating cycle 30.
Simulating cycle 31.
Simulating cycle 32.
Simulating cycle 33.
Simulating cycle 34.
Simulating cycle 35.
Simulating cycle 36.
Simulating cycle 37.
Simulating cycle 38.
Simulating cycle 39.
Simulating cycle 40.

Warnings: 2 unique messages, 4 total
Yosys 0.36+61 (git sha1 df65634e0, clang++-15 15.0.6 -O0 -fPIC -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address)
